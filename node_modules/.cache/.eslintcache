[{"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\index.js":"1","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\App.js":"3","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Home\\Home.js":"4","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Mainpage\\Mainpage.js":"5","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\Footer\\Footer.js":"6","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\TrendBar\\Trendbar.js":"7","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Default\\Default.js":"8","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Tiers\\Tiers.js":"9","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Levelup\\Levelup.js":"10","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Listcoin\\Listcoin.js":"11","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Treasury\\Treasury.js":"12","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\NavBar\\NavBar.js":"13","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\PromotePage\\PromotePage.js":"14","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\context.js":"15","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Details\\Details.js":"16","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\helpers\\firebase.js":"17","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\helpers\\wallet.js":"18","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\PromotedCoins\\Promoted.js":"19","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\TierCard\\TierCard.js":"20","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\Filter\\Filter.js":"21","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\DetailInfo\\DetailInfo.js":"22","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\Overview\\Overview.js":"23","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\DetailMarket\\DetailMarket.js":"24","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\helpers\\configurations\\index.js":"25","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\helpers\\interact.js":"26","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\helpers\\contract.js":"27"},{"size":517,"mtime":1635990331228,"results":"28","hashOfConfig":"29"},{"size":375,"mtime":1635990331231,"results":"30","hashOfConfig":"29"},{"size":357,"mtime":1635990330957,"results":"31","hashOfConfig":"29"},{"size":386,"mtime":1665258676644,"results":"32","hashOfConfig":"29"},{"size":1806,"mtime":1676055919345,"results":"33","hashOfConfig":"29"},{"size":1080,"mtime":1665853157018,"results":"34","hashOfConfig":"29"},{"size":1160,"mtime":1665697179626,"results":"35","hashOfConfig":"29"},{"size":1385,"mtime":1688002771642,"results":"36","hashOfConfig":"29"},{"size":2759,"mtime":1671671773089,"results":"37","hashOfConfig":"29"},{"size":1053,"mtime":1668282885448,"results":"38","hashOfConfig":"29"},{"size":14219,"mtime":1674865593196,"results":"39","hashOfConfig":"29"},{"size":2335,"mtime":1674516793637,"results":"40","hashOfConfig":"29"},{"size":6939,"mtime":1676051481053,"results":"41","hashOfConfig":"29"},{"size":3680,"mtime":1676490971055,"results":"42","hashOfConfig":"29"},{"size":1200,"mtime":1668025616931,"results":"43","hashOfConfig":"29"},{"size":16946,"mtime":1674871304871,"results":"44","hashOfConfig":"29"},{"size":1087,"mtime":1676495683748,"results":"45","hashOfConfig":"29"},{"size":2934,"mtime":1671196166186,"results":"46","hashOfConfig":"29"},{"size":24910,"mtime":1673919942003,"results":"47","hashOfConfig":"29"},{"size":7715,"mtime":1671712713804,"results":"48","hashOfConfig":"29"},{"size":42829,"mtime":1674171353926,"results":"49","hashOfConfig":"29"},{"size":5419,"mtime":1674163407682,"results":"50","hashOfConfig":"29"},{"size":1517,"mtime":1666276349240,"results":"51","hashOfConfig":"29"},{"size":4819,"mtime":1675861568192,"results":"52","hashOfConfig":"29"},{"size":774,"mtime":1672082930309,"results":"53","hashOfConfig":"29"},{"size":2713,"mtime":1666387630558,"results":"54","hashOfConfig":"29"},{"size":1023,"mtime":1667953830302,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lh5mmz",{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\index.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\App.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Home\\Home.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Mainpage\\Mainpage.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\Footer\\Footer.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\TrendBar\\Trendbar.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Default\\Default.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Tiers\\Tiers.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Levelup\\Levelup.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Listcoin\\Listcoin.js",["119","120","121"],"import './Listcoin.css';\r\n\r\nimport coinLocatorImg from '../../assets/img/Form/artboard1.png'\r\nimport openFolderImg from '../../assets/img/Form/openFolder.png'\r\nimport getListedCoin from '../../assets/img/Form/getListedCoin.png'\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\nimport bscImg from '../../assets/img/binance.svg';\r\nimport ethImg from '../../assets/img/ethereum.svg';\r\n\r\nexport const Listcoin =(event) =>{\r\n    const [name, setName] = useState('');\r\n    const [symbol, setSymbol] = useState('');\r\n    const [network, setNetwork] = useState('BSC');\r\n    const [description, setDescription] = useState('');\r\n    const [chartlink, setChartlink] = useState('');\r\n    const [swaplink, setSwaplink] = useState('');\r\n    const [websitelink, setWebsitelink] = useState('');\r\n    const [telegramlink, setTelegramlink] = useState('');\r\n    const [twitterlink, setTwitterlink] = useState('');\r\n    const [discordlink, setDiscordlink] = useState('');\r\n    const [contactemail, setContactEmail] = useState('');\r\n    const [kyc, setKYC] =  useState('');\r\n    const [audit, setAudit] =  useState('');\r\n    const [videolink, setVideoLink] =  useState('');\r\n    const [cmclink, setCMCLink] =  useState('');\r\n    const [contractAddr, setContractAddr] = useState('');\r\n\r\n    const [presaleflag, setPresaleFlag] = useState(false);\r\n    const [logoImg, setLogoImg] = useState(openFolderImg);\r\n    const [checked, setChecked] = useState(false);\r\n    const [startDate, setStartDate] = useState(new Date());\r\n\r\n    const [submitClicked, setSubmitClicked] = useState(false);\r\n    const [listingInfo, setListingInfo] = useState({});\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const onChangeName = (event) => {\r\n        setName(event.target.value);\r\n    }\r\n\r\n    const onChangeSymbol = (event) => {\r\n        setSymbol(event.target.value);\r\n    }\r\n\r\n    const onChangeNetwork = (event) => {\r\n        if(event.target.value === \"BSC\"){\r\n            setNetwork(\"BSC\");    \r\n        }else{\r\n            setNetwork(\"ETH\");\r\n        }        \r\n    }\r\n    \r\n    const onChangeDescription = (event) => {\r\n        setDescription(event.target.value);\r\n    }\r\n    \r\n    const onChangeChartlink = (event) => {\r\n        setChartlink(event.target.value);\r\n    }\r\n\r\n    const onChangeSwaplink = (rooent) => {\r\n        setSwaplink(event.target.value);\r\n    }\r\n    \r\n    const onChangeWebsitelink = (event) => {\r\n        setWebsitelink(event.target.value);\r\n    }\r\n    const onChangeTelegramlink = (event) => {\r\n        setTelegramlink(event.target.value);\r\n    }\r\n    const onChangeTwitterlink = (event) => {\r\n        setTwitterlink(event.target.value);\r\n    }\r\n    const onChangeKYC = (event) =>{\r\n        setKYC(event.target.value);\r\n    }\r\n    const onChangeAudit= (event) => {\r\n        setAudit(event.target.value);\r\n    }\r\n    const onChangeVideoLink = (event) => {\r\n        setVideoLink(event.target.value);\r\n    }\r\n    const onChangeCMCLink = (event) => {\r\n        setCMCLink(event.target.value);\r\n    }\r\n    const onChangeContractAddr = (event) => {\r\n        setContractAddr(event.target.value);\r\n    }\r\n    const onChangeDiscordLink = (event) => {\r\n        setDiscordlink(event.target.value);\r\n    }\r\n    const onChangeContactEmail = (event) => {\r\n        setContactEmail(event.target.value);\r\n    }\r\n    \r\n    const onChangePresale = (event) => {\r\n        if(event.target.value === \"Yes\"){\r\n            setPresaleFlag(true);    \r\n        }else{\r\n            setPresaleFlag(false);\r\n        }        \r\n    }\r\n\r\n    const onChangeTermsAndConditions = (event) => {\r\n        setChecked(event.target.checked);\r\n    }\r\n\r\n    const validateFunc = () => {\r\n        console.log(name, symbol, network, websitelink, telegramlink, contractAddr, \"debug\");\r\n        if(name === \"\") return false;\r\n        if(symbol === \"\") return false;\r\n        if(network === \"\") return false;\r\n        if(websitelink === \"\") return false;\r\n        if(telegramlink === \"\") return false;\r\n        if(contractAddr === \"\") return false;\r\n   \r\n        return true;\r\n     }\r\n    \r\n    const backBtnClicked = () => {\r\n        console.log(process.env.REACT_APP_SERVER_URL);\r\n        navigate(-1, {replace: true});\r\n    }\r\n\r\n    const submitListingInfo = () =>{\r\n        if (validateFunc() === false){\r\n            NotificationManager.error(\"You must fill the all * empty blanks.\");\r\n            return;\r\n        }\r\n        if(checked === false){\r\n            NotificationManager.error(\"You have to agree with Terms and Conditions.\");\r\n            return;\r\n        }\r\n\r\n        if(logoImg === openFolderImg){ \r\n            NotificationManager.error(\"You have to upload logo image before submit.\");\r\n            return;\r\n        }\r\n\r\n        let chartlink_check = false;\r\n        if (chartlink !== \"\" && chartlink.includes(\"https://poocoin.app/\", 0) === true) chartlink_check = true;\r\n        if (chartlink !== \"\" && chartlink.includes(\"https://dextools.io/\", 0) === true) chartlink_check = true;\r\n        \r\n        if(chartlink_check === false)\r\n        {\r\n            NotificationManager.error(\"You have to insert only Poocoin or Dextool Url for chart link.\");\r\n            return;\r\n        }\r\n\r\n        let buffer = {\r\n            name: name,\r\n            symbol: symbol,\r\n            network: network,\r\n            description: description,\r\n            chartlink: chartlink,\r\n            swaplink: swaplink,\r\n            websitelink: websitelink,\r\n            telegramlink: telegramlink,\r\n            twitterlink: twitterlink,\r\n            discordlink: discordlink,\r\n            contactemail: contactemail,\r\n            presale: presaleflag,\r\n            logo: logoImg,\r\n            kyc: kyc,\r\n            audit: audit,\r\n            cmclink: cmclink,\r\n            contractAddr: contractAddr,\r\n            videolink: videolink,\r\n            \r\n            launch: Number(Math.floor(new Date(startDate).getTime() / 1000), \"epoch\"),\r\n            listed: Number(Math.floor(Date.now() / 1000)),\r\n\r\n            voteCount: 0,\r\n\r\n            dailyStart:0,\r\n            dailyCount: 0,\r\n            weeklyStart: 0,\r\n            weeklyCount: 0,\r\n\r\n            watchlist: \"\",\r\n            promoted: 0,\r\n        };\r\n        // setSubmitClicked(true);\r\n        setListingInfo(buffer);\r\n        navigate(\"/tiers/\", {state:{info: buffer, id:\"\"}});\r\n        // pushToDb();\r\n    }\r\n    const imgUploadInput = (e) => {\r\n        var reader = new FileReader();\r\n        reader.onload = function (evt) {\r\n            setLogoImg(evt.target.result);\r\n            console.log(logoImg);\r\n        };\r\n        reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n\r\n    useEffect(()=>{\r\n\r\n    },[logoImg])\r\n\r\n    return (\r\n        <div className=\"listCoinDiv\">\r\n            {/* {!submitClicked?( */}\r\n                <div className=\"listCoinDivWrap\">\r\n                <div className=\"listHeader\">\r\n                    <span>Submit new coin to  </span>\r\n                    <img src={coinLocatorImg} alt=\"\"></img>\r\n                </div>\r\n                <div className=\"uploadImgDivWrap\">\r\n                    <div className=\"openFolderImg\">\r\n                        <span className='titleInput'>Logo Upload*<br/>(.jpg .png .svg)</span>\r\n                        <label htmlFor='uploadFileInput'>\r\n                            <input type=\"file\" id='uploadFileInput' className=\"uploadFile\" style={{display:\"none\"}} onChange={imgUploadInput}/>\r\n                            <img src={logoImg} alt=\"\"/>\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"getListedCoin\">\r\n                        <img src={getListedCoin} alt=\"\"></img>\r\n                    </div>\r\n                </div>\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Name*</span>\r\n                    <input className=\"listingInput\" onChange={onChangeName}/>\r\n                </div>\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Symbol*</span>\r\n                    <input className=\"listingInput\" onChange={onChangeSymbol}/>\r\n                </div>\r\n                {/* <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Network/Chain*</span>\r\n                    <input className=\"listingInput\" onChange={onChangeNetwork}/>\r\n                </div> */}\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Network/Chain*</span>\r\n                    <div className=\"radioDiv\">\r\n                        \r\n                        <input type=\"radio\" id=\"BSC\" name=\"checkNetworkRadio\" value=\"BSC\"\r\n                                checked onChange={onChangeNetwork}/>\r\n                        <label>&nbsp;</label>\r\n                        <img src={bscImg} alt=\"\"></img>\r\n                        <label htmlFor=\"BSC\">&nbsp;BSC&nbsp;&nbsp;</label>\r\n                      \r\n                        <input type=\"radio\" id=\"ETH\" name=\"checkNetworkRadio\" value=\"ETH\" onChange={onChangeNetwork}/>\r\n                        <label>&nbsp;</label>\r\n                        <img src={ethImg} alt=\"\"></img>\r\n                        <label htmlFor=\"ETH\">&nbsp;ETH&nbsp;&nbsp;</label>\r\n                       \r\n                    </div>\r\n                </div>\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Contract Address*</span>\r\n                    <input className=\"listingInput\" onChange={onChangeContractAddr}/>\r\n                </div>\r\n                \r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Project in presale phase?*</span>\r\n                    <div className=\"radioDiv\">\r\n                        <input type=\"radio\" id=\"no\" name=\"checkPresaleRadio\" value=\"No\"\r\n                                checked onChange={onChangePresale}/>\r\n                        <label htmlFor=\"no\">No</label>\r\n                        <input type=\"radio\" id=\"yes\" name=\"checkPresaleRadio\" value=\"Yes\" onChange={onChangePresale}/>\r\n                        <label htmlFor=\"yes\">Yes</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Launch Date*</span>\r\n                    <DatePicker selected={startDate} onChange={(date) => setStartDate(date)} dateFormat='yyyy/MM/dd' style={{ backgroundColor:\"transaparent\"}}/>\r\n                </div>\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Description</span>\r\n                    <textarea className=\"listingInputDescription\" onChange={onChangeDescription}/>\r\n                </div>\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Custom chart link</span>\r\n                    <input className=\"listingInput\" onChange={onChangeChartlink}/>\r\n                </div>\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Custom swap link</span>\r\n                    <input className=\"listingInput\" onChange={onChangeSwaplink}/>\r\n                </div>\r\n                \r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Website link*</span>\r\n                    <input className=\"listingInput\" onChange={onChangeWebsitelink}/>\r\n                </div>\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>KYC</span>\r\n                    <input className=\"listingInput\" onChange={onChangeKYC}/>\r\n                </div>\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Audit</span>\r\n                    <input className=\"listingInput\" onChange={onChangeAudit}/>\r\n                </div>\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Youtube Link</span>\r\n                    <input className=\"listingInput\" onChange={onChangeVideoLink}/>\r\n                </div>\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Coinmarketcap Link</span>\r\n                    <input className=\"listingInput\" onChange={onChangeCMCLink}/>\r\n                </div>\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Telegram link*</span>\r\n                    <input className=\"listingInput\" onChange={onChangeTelegramlink}/>\r\n                </div>\r\n\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Twitter</span>\r\n                    <input className=\"listingInput\" onChange={onChangeTwitterlink} />\r\n                </div>\r\n\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Discord</span>\r\n                    <input className=\"listingInput\" onChange={onChangeDiscordLink} />\r\n                </div>\r\n\r\n                <div className=\"listingNormalDiv\">\r\n                    <span className='titleInput'>Contact Email</span>\r\n                    <input className=\"listingInput\" onChange={onChangeContactEmail} />\r\n                </div>\r\n\r\n                <div className=\"listingCheckboxDiv\">\r\n                    <input type=\"checkbox\" onChange={onChangeTermsAndConditions}/>\r\n                    <span className=\"whiteSpan\">&nbsp;&nbsp;I agree to the&nbsp;&nbsp;</span>\r\n                    <span className=\"redSpan\"> Terms and Conditions</span>\r\n                \r\n                </div>\r\n\r\n                <div className=\"listingBtnDiv\">\r\n                    <button id=\"backBtn\" onClick={backBtnClicked}>Back</button>\r\n                    <button id=\"submitBtn\" type=\"submit\" onClick={submitListingInfo}>Submit</button>\r\n                </div>\r\n                </div> \r\n            {/* ):(<Tiers info={listingInfo}/>)}  */}\r\n            \r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Listcoin;","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Treasury\\Treasury.js",["122"],"import './Treasury.css';\r\n\r\nimport treasuryAdvertiseImg from '../../assets/img/treasuryAdvertise.png';\r\nimport treasuryBudgetImg from '../../assets/img/treasuryBudget.png';\r\n\r\nimport Promoted from '../../components/PromotedCoins/Promoted';\r\nimport { useEffect, useState } from 'react';\r\nimport { ENVS } from '../../helpers/configurations';\r\nimport { ethers } from 'ethers';\r\nimport axios from 'axios';\r\nexport const Treasury = () => {\r\n\r\n    const [bnbBalance, setBNBBalance] = useState(0);\r\n    \r\n    useEffect(()=>{\r\n        const getBNBValueFunc = async () => {\r\n            const infuraProvider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = infuraProvider.getSigner();\r\n            const bnbBalance = await infuraProvider.getBalance(ENVS.TREASURY_ADDR);\r\n            \r\n            let qs = `?symbol=BNB&convert=USD`;\r\n            let res = await axios.get('https://agile-cove-74302.herokuapp.com/https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest' + qs, {\r\n                    headers: { 'X-CMC_PRO_API_KEY': \"a8dd2502-9e7c-4bf6-8cd2-29d2829e042a\" }})\r\n            \r\n            let bnbPrice = res.data.data[\"BNB\"]?.quote.USD.price;\r\n            if(typeof bnbPrice !== undefined){\r\n                let bnbValuable = ethers.utils.formatUnits(bnbBalance, 18) * bnbPrice;\r\n                setBNBBalance(\"$\" + bnbValuable.toFixed(1));\r\n            }else{\r\n                setBNBBalance(ethers.utils.formatUnits(bnbBalance, 18) + \"BNB\");\r\n            }\r\n        }\r\n        \r\n        getBNBValueFunc();\r\n\r\n    },[])\r\n\r\n    return(\r\n        <div className=\"treasuryDiv\">\r\n            <div className = \"treasuryAdvertiseDiv\">\r\n                <img src={treasuryAdvertiseImg} alt=\"\"></img>\r\n            </div>\r\n            <div className = \"treasuryContentsDiv\">Buy Back Treasury</div>\r\n            <Promoted title=\"Vote Tracker\" filter=\"weeklyCount\" caption=\"Weekly Ranking\"/>\r\n            <div className = \"treasuryContentsDiv\">Treasury Status</div>\r\n            <div className = \"treasuryBudgetDiv\">\r\n                <div className = \"budgetWrapperDiv\">\r\n                    <img src={treasuryBudgetImg} alt=\"\"></img>\r\n                </div>\r\n                <div className = \"budgetAmountDiv\">{bnbBalance}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Treasury;","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\NavBar\\NavBar.js",["123"],"\r\nimport './NavBar.css';\r\n\r\nimport React, { useEffect, useContext } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport Grid from '@mui/material/Grid';\r\n\r\nimport logoImg from '../../assets/img/logo.png';\r\n\r\nimport { connectWallet, getCurrentWalletConnected } from \"../../helpers/wallet\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { AppContext } from '../../context';\r\n\r\nexport const NavBar = () => {\r\n  \r\n  const [tool, setTool] = React.useState(false)\r\n  // const [walletAddress, setWalletAddress] = useState(\"\");\r\n  // const [nitroAmount, setNitroAmount] = useState(\"\");\r\n  \r\n  const  { walletAddress, handleWalletAddress} = useContext(AppContext);\r\n\r\n  // const [status, setStatus] = useState(\"\");\r\n  \r\n  const navigate = useNavigate();\r\n  \r\n  useEffect(() => {\r\n    const initDatas = async () => {\r\n      if (window.ethereum) {\r\n        const { address } = await getCurrentWalletConnected();\r\n        // const nitroBalance = await getNitrogemAmount(address);\r\n        \r\n        handleWalletAddress(address);\r\n        // handleNitroBalance(Number(nitroBalance));\r\n        // handleVoteCountChanged()\r\n    \r\n        // let admins = ENVS.ADMINS;\r\n        // if(walletAddress !== \"\" && admins.includes(walletAddress)){\r\n        //   handleAdminFlag(true);\r\n        // }else{\r\n        //   handleAdminFlag(false);\r\n        // }\r\n        // setStatus(status);\r\n        onChangeWalletListener();\r\n        onConnectWalletHandler();\r\n      }\r\n    };\r\n    initDatas();\r\n  }, [walletAddress]);\r\n  \r\n  const onConnectWalletHandler = async () => {\r\n    if (window.ethereum) {\r\n      const walletResponse = await connectWallet();\r\n      // setStatus(walletResponse.status);\r\n      \r\n      handleWalletAddress(walletResponse.address);\r\n      //const nitroBalance = await getNitrogemAmount(walletResponse.address);\r\n      //handleNitroBalance(Number(nitroBalance));\r\n      // let admins = ENVS.ADMINS;\r\n      // if(walletAddress !== \"\" && admins === walletAddress){\r\n      //   handleAdminFlag(true);\r\n      // }else{\r\n      //   handleAdminFlag(false);\r\n      // }\r\n      \r\n    } else {\r\n      NotificationManager.success(\r\n        \"🦊 You must install Metamask in your browser\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const onChangeWalletListener = async () => {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length) {\r\n          handleWalletAddress(accounts[0]);\r\n          // let admins = ENVS.ADMINS;\r\n          // if(walletAddress !== \"\" && admins.includes(walletAddress)){\r\n          //   handleAdminFlag(true);\r\n          // }else{\r\n          //   handleAdminFlag(false);\r\n          // }\r\n          // setStatus(\"Get your DreamyGeek, 0.0314ETH\");\r\n        } else {\r\n          handleWalletAddress(\"\");\r\n          // handleNitroBalance(0);\r\n          // handleAdminFlag(false);\r\n          // setStatus(\"Connect Metamask\");\r\n        }\r\n      });\r\n\r\n      window.ethereum.on(\"chainChanged\", (chainId) => {\r\n        onConnectWalletHandler();\r\n      });\r\n    } else {\r\n      // setStatus(\r\n      //   <p>\r\n      //     🦊 You must install Metamask, a virtual Ethereum wallet, in your\r\n      //     browser.(https://metamask.io/download.html)\r\n      //   </p>\r\n      // );\r\n    }\r\n  };\r\n\r\n  const toolsChanged = (event) => {\r\n    navigate(event.target.value, {replace: true});\r\n  }\r\n  \r\n  const logoImgClicked = () => {\r\n    navigate(\"/\", {replace: true});\r\n  }\r\n\r\n  const levelUpBtnClicked = () => {\r\n    navigate(\"/levelup\", {replace: true});\r\n  }\r\n\r\n  const treasuryBtnClicked = () => {\r\n    navigate(\"/treasury\", {replace: true});\r\n  }\r\n\r\n  return (\r\n      <div>\r\n          <div className=\"navArea\">\r\n              <Grid container>\r\n                  <Grid item xs={12} md={6} lg={4}>\r\n                      <div className=\"logoImg\" onClick={logoImgClicked}>\r\n                          <img src={logoImg} alt=\"\"></img>\r\n                      </div>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={6} lg={4} sx={{display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:'center'}}>\r\n                      <div className=\"inputDiv\">\r\n                          <input type='text' placeholder='Search' className='searchInput' />\r\n                      </div>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={12} lg={4} sx={{display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:'center'}}>\r\n                          <div className=\"navBtns\">\r\n                              <div className=\"navBtnWrappedDiv\">\r\n                                  <Link to=\"/listcoin\">\r\n                                    <button className=\"navBtn\" type=\"button\">List Coin</button>                                    \r\n                                  </Link>\r\n                              </div>\r\n\r\n                              <div className=\"navBtnWrappedDiv\">\r\n\r\n                                  <Link to=\"/promote\">\r\n                                    <button className=\"navBtn\" type=\"button\">Promote</button>                                    \r\n                                  </Link>\r\n\r\n                                  {/* <button className='navBtn' onClick={() => window.open(\"https://t.me/onlygemsfinance\", \"_blank\")}>Promote</button>  */}\r\n                              </div>\r\n                              <div className=\"navBtnWrappedDiv\">     \r\n                                  <button className='navBtn' onClick={() => onConnectWalletHandler()}>{walletAddress === \"\" ? \"Connect Wallet\": walletAddress.substring(0, 5) + \"..\" + walletAddress.substring(36, 40)}</button>\r\n                              </div>\r\n                          </div>\r\n                  </Grid>\r\n              </Grid>\r\n          </div>\r\n      \r\n          <div className=\"btnArea\">\r\n              <button id='cryptocurrenciesBtn'>Cryptocurrencies</button>\r\n              <select \r\n                  id='selectTools' \r\n                  className=\"selectTools\" \r\n                  onChange={toolsChanged}\r\n                  placeholder='Tools'\r\n                  onFocus={() => setTool(true)}\r\n              >\r\n                  <option style={{ display: tool ? 'none' : 'hidden' }}>Tools</option>\r\n                  {/* <option key=\"buy_nitrogem\" value=\"/buynitrogem\" onClick={toolsChanged}>Buy Nitrogem</option>\r\n                  <option key=\"listing_tiers\" value=\"\" onClick={toolsChanged}>Others will be soon</option>\r\n                   */}\r\n              </select>\r\n              \r\n              <button id='treasuryBtn' onClick={treasuryBtnClicked}>Buy Back Treasury</button>\r\n              <button id='lotteryBtn'>Lottery</button>\r\n              <button id='stakingBtn'>Staking</button>\r\n              <button id='levelUpBtn' onClick={levelUpBtnClicked}>Level Up</button>\r\n          </div>\r\n\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default NavBar;","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\PromotePage\\PromotePage.js",["124","125"],"\r\nimport './PromotePage.css';\r\nimport promoteHeaderImg from '../../assets/img/promote_header.png';\r\nimport promoteImg1 from '../../assets/img/promoteImg1.png';\r\nimport promoteImg2 from '../../assets/img/promoteImg2.png';\r\nimport promoteImg3 from '../../assets/img/promoteImg3.png';\r\nimport promoteImg4 from '../../assets/img/promoteImg4.png';\r\nimport promoteImg5 from '../../assets/img/promoteImg5.png';\r\n\r\n\r\nexport const PromotePage = () => {\r\n\r\n    const promoteDescArray =   [\r\n        {header : \"Wide Header Banner\", detail : \"Main Page\", image: promoteImg1},\r\n        {header : \"Rotating Header Banner\", detail : \"Main Page\", image: promoteImg2},\r\n        {header : \"Wide Header Banner\", detail : \"Coin Page\", image: promoteImg3},\r\n        {header : \"Rotating Header Banner\", detail : \"Coin Page\", image: promoteImg4},\r\n        {header : \"Trending Coin Section\", detail : \"\", image: promoteImg5},\r\n    ];\r\n\r\n    const lists= [];\r\n\r\n    promoteDescArray.forEach(element => {\r\n        lists.push(<div className=\"promotePageList\">\r\n            <div className=\"promoteImgDiv\">\r\n                <img src={element.image}></img>\r\n            </div>\r\n            <div className=\"promoteDescDiv\">\r\n                <div className=\"promoteHeaderBannerDiv\">\r\n                    <div className=\"promoteHeaderBannerDivWrapped\">\r\n                        <span className=\"headerBannerTitleSpan\">{element.header}</span>\r\n                        <br/>\r\n                        <span className=\"headerBannerDescSpan\">{element.detail}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"dayPromotionBnb\">\r\n                    <div className=\"leftSideDescBnb\">\r\n                        1 day promotion\r\n                    </div>\r\n                    <div className=\"bnbAmountDiv\">\r\n                        0.3 BNB\r\n                    </div>\r\n                </div>\r\n                <div className=\"dayPromotionBnb\">\r\n                    <div className=\"leftSideDescBnb\">\r\n                        3 days promotion\r\n                    </div>\r\n                    <div className=\"bnbAmountDiv\">\r\n                        0.75 BNB\r\n                    </div>\r\n                </div>\r\n                <div className=\"dayPromotionBnb\">\r\n                    <div className=\"leftSideDescBnb\">\r\n                        7 days promotion\r\n                    </div>\r\n                    <div className=\"bnbAmountDiv\">\r\n                        1.5 BNB\r\n                    </div>\r\n                </div>\r\n                <div className=\"footerPromote\">\r\n                    <span className='prmoteFooterSpan'>\r\n                        Size of banner : 600 * 240px<br/>\r\n                        Image type : .jpg .jpeg .png .gif<br/>\r\n                        File size &lt; 4 Mb\r\n                    </span>\r\n                </div>\r\n\r\n                <div className=\"promoteBuyNowBtnDiv\">\r\n                    BUY NOW\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    });   \r\n    \r\n    return (\r\n        <div className=\"promotePageDiv\">\r\n            <div className=\"promotePageHeaderDiv\">\r\n                <div className=\"promotePageLeftHeader\">\r\n                    <span className=\"promoteTitleSpan\">Promote your coin</span>                    \r\n                    <br/>\r\n                    <span className=\"promoteDescSpan\"> Promote your coin with one of our effective packages</span>\r\n                </div>\r\n                <div className=\"promotePageRightHeader\">\r\n                    <img src={promoteHeaderImg}></img>\r\n                </div>\r\n            </div>\r\n            {lists}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PromotePage;","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\context.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\pages\\Details\\Details.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\helpers\\firebase.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\helpers\\wallet.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\PromotedCoins\\Promoted.js",["126"],"import './Promoted.css';\r\n\r\nimport emeraldImg from '../../assets/img/emerald.png';\r\nimport rubyImg from '../../assets/img/ruby.png';\r\nimport diamondImg from '../../assets/img/diamond.png';\r\nimport loadingImg from '../../assets/img/loading.svg';\r\nimport { useEffect, useState, useContext  } from 'react';\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core/\";\r\nimport { database } from '../../helpers/firebase.js';\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { AppContext } from '../../context';\r\nimport watchlistImg from '../../assets/img/watchlisted.png';\r\nimport nonwatchlistImg from '../../assets/img/nonwatchlisted.png';\r\nimport axios from 'axios';\r\nimport { ENVS } from \"../../helpers/configurations\";\r\nimport { ethers } from \"ethers\";\r\n\r\nexport const Promoted = (props) => {\r\n\r\n    const titleStr = props.title;\r\n    const filterStr = props.filter;\r\n    const caption = props.caption;\r\n    const [load, setLoaded] = useState(0);\r\n    const [loading, setLoading] =useState(true);\r\n    const [allData, setAllData] = useState({});\r\n    const { walletAddress, synchroTables, handleSynchroTables } = useContext(AppContext);\r\n\r\n    const [allShowData, setAllShowData] = useState([]);\r\n    const [openWatchListDlg, setWatchListDlg] = useState(false);\r\n    const [rowId, setRowId] = useState(\"\");\r\n    const [wlDlgTitle, setWlDlgTitle] = useState(\"\");\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        setAllData({});\r\n        let tempData = [];\r\n        console.log(\"promoted js filterstr = \", filterStr);\r\n        const dbRef = database.ref(\"/coinlist\");\r\n        // dbRef.orderByChild(filterStr).limitToFirst(10).on('value', async (snapshot) => {\r\n        dbRef.orderByChild(\"promoted\").startAt(1).on('value', async (snapshot) => {\r\n            if(snapshot.exists()){\r\n                setAllData(snapshot.val());\r\n                let wlImg = \"\";\r\n                let tempSnapShot = snapshot.val();\r\n                \r\n                for(let i in tempSnapShot){\r\n                    wlImg = nonwatchlistImg;\r\n                    \r\n                    let wlList = tempSnapShot[i].watchlist;\r\n\r\n                    if (wlList?.includes(walletAddress)){\r\n                        wlImg = watchlistImg;\r\n                    }\r\n                    \r\n                    let tierImg = emeraldImg;\r\n                    if(tempSnapShot[i].voteCount >= ENVS.DIAMOND_TIRE_LIMIT) {\r\n                        tierImg = diamondImg;\r\n                    }else if(tempSnapShot[i].voteCount >= ENVS.RUBY_TIRE_LIMIT) {\r\n                        tierImg = rubyImg;\r\n                    }\r\n                    \r\n                    let mcap, change24h;\r\n                    if(tempSnapShot[i].presale === true){\r\n                        mcap = \"Presale\";\r\n                        change24h = \"-\"\r\n                    }else{\r\n                        let qs = `?symbol=${tempSnapShot[i].symbol}&convert=USD`;\r\n                        let res = await axios.get('https://agile-cove-74302.herokuapp.com/https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest' + qs, {\r\n                                headers: { 'X-CMC_PRO_API_KEY': \"a8dd2502-9e7c-4bf6-8cd2-29d2829e042a\" }})\r\n                        \r\n                        let tempSymbol = tempSnapShot[i].symbol;\r\n                        mcap = res.data.data[tempSymbol]?.quote.USD.market_cap;\r\n                        change24h = res.data.data[tempSymbol]?.quote.USD.percent_change_24h;\r\n                        \r\n                    }\r\n                    \r\n                    tempData.push([\r\n                        tempSnapShot[i].logo, \r\n                        tempSnapShot[i].name, \r\n                        tempSnapShot[i].network,\r\n                        isNaN(mcap) ? mcap: floorValue(mcap),\r\n                        isNaN(change24h) ?  change24h:floorValue(change24h),\r\n                        convertLaunchDate(tempSnapShot[i].launch), \r\n                        tierImg, \r\n                        tempSnapShot[i].voteCount, \r\n                        \"\",\r\n                        wlImg,\r\n                        i\r\n                    ]);\r\n                }\r\n                \r\n                setAllShowData(tempData);\r\n                setLoaded(1);\r\n                setLoading(false);\r\n            }else{\r\n                setAllData({});\r\n                setAllShowData([]);\r\n                setLoading(false);\r\n            }\r\n        })\r\n     \r\n\r\n    },[load, rowId, walletAddress, synchroTables])\r\n\r\n    const floorValue = (value) => {\r\n        if(value > 1000000000){\r\n            return (Math.floor(value/1000000000*100)/100) + \" B\";\r\n        }\r\n        else if(value > 1000000) {\r\n            return (Math.floor(value/1000000*100)/100) + \" M\";\r\n        }else if(value > 1000){\r\n            return (Math.floor(value/1000*100)/100).toString + \" K\";\r\n        }else{\r\n            return Math.floor(value*100)/100;\r\n        }\r\n    }\r\n    \r\n    const handleOpenWatchListDlg = (id) => {\r\n        let wllist = allData[id].watchlist;\r\n\r\n        if(wllist.includes(walletAddress)){\r\n            setWlDlgTitle(\"You are going to remove this project from your Watchlist?\");\r\n        }else{\r\n            setWlDlgTitle(\"You are going to add this project to your Watchlist?\");\r\n        }\r\n        setRowId(id);\r\n        setWatchListDlg(true);\r\n    }\r\n    const handleCloseWatchListDlg = () => {\r\n        setWatchListDlg(false);\r\n    }\r\n    const convertLaunchDate = (epoch) => {\r\n        let dateDiff = 0;\r\n        let monthDiff = 0;\r\n        let yearDiff = 0;\r\n\r\n        let countNow = Math.floor(Math.floor(Date.now() / 1000) / 86400);\r\n        let launchDate = Math.floor(epoch / 86400);\r\n\r\n        if(countNow > launchDate){\r\n            dateDiff = countNow - launchDate;\r\n            if(countNow - launchDate > 365){\r\n                yearDiff = Math.floor(dateDiff / 365);\r\n                return yearDiff.toString() + \" Year Ago\";\r\n            }else if( dateDiff > 30){\r\n                monthDiff = Math.floor(dateDiff / 30);\r\n                return monthDiff.toString() + \" Mon Ago\";\r\n            }else{\r\n                dateDiff = countNow - launchDate;\r\n                return dateDiff.toString() + \" Day Ago\";\r\n            }\r\n        }else if(countNow < launchDate){\r\n            dateDiff = launchDate - countNow;\r\n            if( dateDiff > 365 ) {\r\n                yearDiff = Math.floor(dateDiff / 365);\r\n                return \"In \" +  yearDiff.toString() + \" Year\";\r\n            }\r\n            else if( dateDiff > 30 ){\r\n                monthDiff = Math.floor(dateDiff / 30);\r\n                return \"In \" +  monthDiff.toString() + \" Mon\";\r\n            }\r\n            else{\r\n                return \"In \" +  dateDiff.toString() + \" Day\";\r\n            }\r\n        }else{\r\n            return \"Today\";\r\n        }\r\n         \r\n    }\r\n\r\n    const onRowClick = (rowData, rowMeta, e) => {\r\n        \r\n        if(e.target.type === 'submit' || e.target.type === 'number' || e.target.src === watchlistImg || e.target.src === nonwatchlistImg) {\r\n            return;\r\n        }else\r\n        {    \r\n            // setSelectedRowData(allData[rowData[8]]);\r\n            navigate(\"/details/\" + rowData[10], {replace: true});\r\n        }\r\n    }\r\n\r\n    const wlBtnClicked = () => {\r\n        if (walletAddress === \"\"){\r\n            NotificationManager.error(\"You have to connect wallet first\");\r\n            return;\r\n        }\r\n\r\n        handleCloseWatchListDlg();\r\n\r\n        let wllist = allData[rowId].watchlist;\r\n        if(wllist.includes(walletAddress)){\r\n            let db = database.ref(\"/coinlist/\" + rowId);\r\n            db.update({ watchlist: wllist.replace(walletAddress + \",\", \"\") }\r\n            ).catch(e => {\r\n                NotificationManager.error(\"Can not add.\");\r\n                console.log(e);\r\n            }).then(()=> {\r\n                NotificationManager.success(\"Removed successfully.\");\r\n                setLoaded(load + 1);\r\n                handleSynchroTables(synchroTables + 1);\r\n            });   \r\n        }else{\r\n            let db = database.ref(\"/coinlist/\" + rowId);\r\n            db.update({ watchlist: allData[rowId].watchlist + walletAddress + \",\"  }\r\n            ).catch(e => {\r\n                NotificationManager.error(\"Can not add.\");\r\n                console.log(e);\r\n            }).then(()=> {\r\n                NotificationManager.success(\"Added successfully.\");\r\n                setLoaded(load + 1);\r\n                handleSynchroTables(synchroTables + 1);\r\n            });   \r\n        }\r\n    }\r\n\r\n    const voteClicked = async (id) =>{\r\n        let dbRef = database.ref(\"/votelimit\");\r\n        let dailyStart = 0;\r\n        let dailyCount = 0;\r\n        let epochNow = Math.floor(Date.now() / 1000);\r\n        let tempId = \"\";\r\n        let ret_val = false;\r\n        dbRef.orderByChild(\"wallet\").equalTo(walletAddress).on('value', (snapshot) => \r\n        {\r\n            // wallet exists\r\n            if(snapshot.exists()){\r\n                // console.log(\"wallet exists already in vote limit table\");\r\n                let tempRow = snapshot.val();\r\n               \r\n                for(let i in tempRow){ // i = asdfawefawefx  => example\r\n                    tempId = i;\r\n                    dailyStart = tempRow[i].dailyStart;\r\n                    dailyCount = tempRow[i].dailyCount;\r\n                }\r\n\r\n                console.log(dailyCount, \"daily count\");\r\n                if(dailyCount >= 5 && (epochNow - dailyStart) <= 24*60*60 ){\r\n                    NotificationManager.error(\"You can only vote 5 times per day.\");\r\n                    ret_val = true;\r\n                }\r\n            }\r\n        })\r\n        if(ret_val) return;\r\n        const infuraProvider = new ethers.providers.Web3Provider(window.ethereum)\r\n        const signer = infuraProvider.getSigner()\r\n\r\n        const tx = {\r\n            from: walletAddress,\r\n            to: ENVS.CHARITY_ADDR,\r\n            value: ethers.utils.parseUnits(ENVS.NORMAL_VOTE_FEE),\r\n        };\r\n            \r\n        await signer.sendTransaction(tx).then(async () => {\r\n\r\n            if(tempId === \"\"){\r\n                dbRef.push({ wallet: walletAddress, dailyStart: Math.floor(epochNow/86400) * 86400, dailyCount: dailyCount + 1});\r\n            }else{\r\n                let dbRefUpdate = database.ref(\"/votelimit/\" + tempId);\r\n                dbRefUpdate.update({ dailyCount: dailyCount + 1 });\r\n            }\r\n\r\n            let db = database.ref(\"/coinlist/\" + id);\r\n\r\n            let updateDailyCount = 0;\r\n            let updateDailyStart = 0;\r\n\r\n            let updateWeeklyCount = 0;\r\n            let updateWeeklyStart = 0;\r\n\r\n            let epochNowDay = Math.floor(epochNow/86400) * 86400;\r\n            if(epochNowDay - Number(allData[id].updateWeeklyStart) > 86400 * 7){\r\n                updateWeeklyCount = 1;\r\n                let getDayCount = Math.floor(epochNow/86400) % 7;\r\n                switch(getDayCount){\r\n                    case 0:\r\n                        updateWeeklyStart = (Math.floor(epochNow/86400) - 3 ) * 86400;\r\n                        break;\r\n                    case 1:\r\n                        updateWeeklyStart = (Math.floor(epochNow/86400) - 4 ) * 86400;\r\n                        break;\r\n                    case 2:\r\n                        updateWeeklyStart = (Math.floor(epochNow/86400) - 5 ) * 86400;\r\n                        break;\r\n                    case 3:\r\n                        updateWeeklyStart = (Math.floor(epochNow/86400) - 6 ) * 86400;\r\n                        break;\r\n                    case 4:\r\n                        updateWeeklyStart = (Math.floor(epochNow/86400) - 0 ) * 86400;\r\n                        break;\r\n                    case 5:\r\n                        updateWeeklyStart = (Math.floor(epochNow/86400) - 1 ) * 86400;\r\n                        break;\r\n                    case 6:\r\n                        updateWeeklyStart = (Math.floor(epochNow/86400) - 2 ) * 86400;\r\n                        break;\r\n                    default:\r\n                        updateWeeklyStart = 0;\r\n                        break;\r\n                    }\r\n            }else{\r\n                updateWeeklyStart = allData[id].weeklyStart;\r\n                updateWeeklyCount = allData[id].weeklyCount + 1;\r\n            }\r\n\r\n            if(epochNow - Number(allData[id].dailyStart) < 86400){\r\n                updateDailyCount = Number(allData[id].dailyCount) + 1;\r\n                updateDailyStart = Number(allData[id].dailyStart)\r\n            }else{\r\n                updateDailyCount = 1;\r\n                updateDailyStart = Math.floor(epochNow/86400) * 86400;\r\n            }\r\n\r\n            db.update({ voteCount: Number(allData[id].voteCount) + 1,\r\n                        dailyStart: updateDailyStart,\r\n                        dailyCount: updateDailyCount,\r\n                        weeklyStart: updateWeeklyStart,\r\n                        weeklyCount: updateWeeklyCount})\r\n            \r\n            if(Number(allData[id].voteCount) < ENVS.DIAMOND_TIRE_LIMIT && Number(allData[id].voteCount) + 1 >= ENVS.DIAMOND_TIRE_LIMIT){\r\n                await fetch(`${process.env.REACT_APP_SERVER_URL}/diamond/?token=${allData[id].name}`, {\r\n                    method: \"GET\"\r\n                })\r\n                .then(() => {\r\n                    NotificationManager.info(\"Notification about Diamond Tier has sent to TG channel.\");\r\n                })\r\n                .catch(err => console.log(err))\r\n\r\n            }else if(Number(allData[id].voteCount) < ENVS.RUBY_TIRE_LIMIT && Number(allData[id].voteCount) + 1 >= ENVS.RUBY_TIRE_LIMIT){\r\n                await fetch(`${process.env.REACT_APP_SERVER_URL}/ruby/?token=${allData[id].name}`, {\r\n                    method: \"GET\"\r\n                })\r\n                .then(() => {\r\n                    NotificationManager.info(\"Notification about Ruby has sent to TG channel.\");\r\n                })\r\n                .catch(err => console.log(err))\r\n            }else{\r\n\r\n            }\r\n        }).catch((e) => {\r\n            NotificationManager.error(\"Transaction failed.\");\r\n            console.log(e);\r\n        })\r\n\r\n        handleSynchroTables(synchroTables + 1);\r\n        setLoaded(load + 1);\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name:\"Logo\",\r\n            options:{\r\n                customBodyRender: (value) => {\r\n                    // console.log(value, \"bbbbbbb\"); \r\n                    return (\r\n                        <div className=\"logoImgDiv\"><img src={value} alt=\"\"/></div>\r\n                    );\r\n                }\r\n            }\r\n        }, \r\n        {\r\n            name:\"Name\",\r\n            options:{\r\n                setCellProps: () => ({\r\n                    style: {\r\n                      whiteSpace: \"nowrap\",\r\n                      position: \"sticky\",\r\n                      backgroundColor: \"#290825\",\r\n                      left: \"0\",\r\n                      zIndex: 100\r\n                    }\r\n                }),\r\n            }\r\n        }, \r\n        \"Chain\",\r\n        \"MCAP\",\r\n        {\r\n            name:\"Change 24h\",\r\n            options:{\r\n                customBodyRender: (value, tableMeta, updateValu) => {\r\n                    \r\n                    let val = tableMeta.rowData[4];\r\n                    \r\n                    if (isNaN(val)){\r\n                        return (\r\n                            <div className=\"change24hDiv\" style={{ color: \"white\"}}><span>{val}</span></div>\r\n                        );\r\n                    }\r\n                    else if (val < 0){\r\n                        val = 0 - val;\r\n                        return (\r\n                            <div className=\"change24hDiv\" style={{ color: \"yellow\"}}><span>{\"- \" + val + \" %\"}</span></div>\r\n                        );\r\n                    }\r\n                    else{\r\n                        return (\r\n                            <div className=\"change24hDiv\"  style={{ color: \"green\"}}><span>{ \"+ \" + tableMeta.rowData[4] + \" %\"}</span></div>\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }, \r\n        \"Launch\",\r\n        {\r\n            name:\"Tier\",\r\n            options:{\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <div className=\"tierImgDiv\"><img src={tableMeta.rowData[6]} alt=\"\" /></div>\r\n                    );\r\n                }\r\n            }\r\n        }, \r\n        \"Vote Counts\",\r\n        {\r\n            name: \"\",\r\n            options:{\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <div className=\"voteBtnDiv\">\r\n                            <div className=\"voteBtnWrapped\">\r\n                                <button className=\"voteBtn\" onClick={() => voteClicked(tableMeta.rowData[10])}>VOTE</button>\r\n                            </div>\r\n                            <Dialog\r\n                                open={openWatchListDlg}\r\n                                onClose={handleCloseWatchListDlg}\r\n                                aria-labelledby=\"alert-dialog-title\"\r\n                                aria-describedby=\"alert-dialog-description\"\r\n                            >\r\n                                <DialogTitle id=\"alert-dialog-title\">\r\n                                    {wlDlgTitle}\r\n                                </DialogTitle>\r\n                                <DialogActions>\r\n                                <Button type=\"submit\" onClick={wlBtnClicked} autoFocus>Yes</Button>\r\n                                <Button type=\"submit\" onClick={handleCloseWatchListDlg}>\r\n                                    No\r\n                                </Button>\r\n                                </DialogActions>\r\n                            </Dialog>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: \"WatchListed\",\r\n            options:{\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    // console.log(tableMeta.rowData[5], \"aaaaaaaaaaaaa\"); \r\n                    return (\r\n                        <div className=\"wlImgDiv\" onClick={()=> handleOpenWatchListDlg(tableMeta.rowData[10])}>\r\n                            <img className=\"wlImg\" src={tableMeta.rowData[9]} alt=\"\"></img>\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n            }\r\n        },{\r\n            name:\"Hidden\",\r\n            options:{\r\n                display: \"false\"\r\n            }\r\n        }  \r\n    ];\r\n   \r\n    const options = {\r\n        filter: false,\r\n        // filterType: \"dropdown\",\r\n        // responsive: \"vertical\",\r\n        responsive:\"standard\",\r\n        rowHover: true,\r\n        tableBodyMaxHeight: \"100%\",\r\n        selectableRows: 'none',\r\n        viewColumns: false,\r\n        fixedSelectColumn: true,\r\n        onRowClick:onRowClick\r\n    };\r\n\r\n    // const epochToDate = (epoch) => {\r\n    //     return moment.unix(epoch).format('YYYY/MM/DD');\r\n    // }\r\n\r\n    const getMuiTheme = () =>\r\n        createTheme({\r\n            overrides: {\r\n                MuiTableCell:{\r\n                    body:{\r\n                        color: \"white\",\r\n                        fontWeight:\"bold\",\r\n                        fontSize: \"20px\",\r\n                        \r\n                        // borderColor: \"#669999\"\r\n                    },\r\n                    root:{\r\n                        textAlign:\"center\"\r\n                        // borderColor: \"#669999\",\r\n                    },\r\n                },\r\n                MUIDataTableBodyRow: {\r\n                    root: {\r\n                        backgroundColor: \"#290825\",\r\n                        color:\"white\",\r\n                        // borderColor:\"#669999\",\r\n                        '&:hover': {\r\n                            backgroundColor: '#669999 !important'\r\n                        },\r\n                        height: \"30px\"\r\n                    }\r\n                },\r\n                MUIDataTableBodyCell:{\r\n                    root:{\r\n                        textAlign: \"center\"\r\n                    }\r\n                },\r\n                MUIDataTableFilter: {\r\n                    root: {\r\n                    backgroundColor: \"#669999\",\r\n                    }\r\n                },\r\n                \r\n                MUIDataTable:{\r\n                    paper:\r\n                    {width: \"99%\",\r\n                // borderColor: \"#290825\",\r\n                color: \"white\"}\r\n                    \r\n                }\r\n                ,\r\n                MUIDataTableToolbar: {\r\n                root: {\r\n                    backgroundColor: \"#290825\"\r\n                }\r\n                },\r\n                MUIDataTableHeadCell: {\r\n\r\n                    fixedHeader:{\r\n                        backgroundColor:\"#290825\",\r\n                        color: \"white\",\r\n                        alignContent:'center',\r\n                        \r\n\r\n                    },\r\n                    data:{\r\n                        color: \"white\",\r\n                        \r\n\r\n                    },\r\n                    sortActive:{\r\n                        color: \"white\",\r\n                        alignItems: \"center !important\",\r\n                        \r\n                    },\r\n                    sortAction: {\r\n                        alignItems:\"center\",\r\n                        justifyContent:\"center\"\r\n                    },\r\n                    contentWrapper:{\r\n                        justifyContent:\"center\",\r\n                        textAlign:\"center\"\r\n                    }\r\n                },\r\n                MuiSvgIcon:{\r\n                    root:{\r\n                        color: \"white\"\r\n                    }\r\n                },\r\n                MUIDataTableSearch:{\r\n                    searchIcon:{\r\n                        color: \"white\"\r\n                    },\r\n                    searchText:{\r\n                        color: \"white\"\r\n                    }\r\n                },\r\n                MuiTableSortLabel:{\r\n                    root: {\r\n                        color:\"white !important\"   \r\n                    },\r\n                    active: {\r\n                        color:\"white !important\"   \r\n                    },\r\n                    icon: {\r\n                        color:\"white !important\"\r\n                    },\r\n                    iconDirectionAsc:{\r\n                        color: \"white !important\"\r\n                    },\r\n                    iconDirectionDesc:{\r\n                        color: \"white !important\"\r\n                    }\r\n                },\r\n                MuiTablePagination:{\r\n                    root:{\r\n                        color:\"white\"\r\n                    }\r\n                },\r\n                MuiSelect:{\r\n                    icon:{\r\n                        color:\"white\"\r\n                    },\r\n                    root:{\r\n                        color:\"white\"\r\n                    }\r\n                },\r\n                MuiTypography:{\r\n                    h6:{\r\n                        textAlign: 'center'\r\n                    }\r\n                },\r\n                MUIDataTableFooter:{\r\n                    root:{\r\n                        display: \"none\"\r\n                    }\r\n                }\r\n            }\r\n    });\r\n\r\n    return(\r\n        <div className=\"showcoinDivWrapped\">\r\n            {loading === false ? (\r\n                <div className=\"showcoinDiv\">\r\n                    <div className=\"diamondWrappedDiv\">\r\n                        <div className=\"diamondDiv\">\r\n                            {/* <img src={diamondImg}></img> */}\r\n                            <span>{titleStr}</span>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <ThemeProvider theme={getMuiTheme()}>\r\n                        <MUIDataTable data={allShowData} columns={columns} options={options} title={caption}/>\r\n                    </ThemeProvider >\r\n                </div>):(\r\n                    <div className=\"showcoinDiv\"> \r\n                        <div className=\"diamondWrappedDiv\">\r\n                            <div className=\"diamondDiv\">\r\n                                <span>{titleStr}</span>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"loadingDiv\">\r\n                            <img src={loadingImg} alt=\"loading\" />\r\n                        </div>\r\n                    </div>\r\n                )}    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Promoted;","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\TierCard\\TierCard.js",["127"],"import './TierCard.css'\r\nimport { database } from '../../helpers/firebase.js';\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { buyDiamondTier } from '../../helpers/interact';\r\nimport { useContext } from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { ENVS } from '../../helpers/configurations';\r\nimport { AppContext } from '../../context';\r\nimport { ethers } from \"ethers\";\r\n\r\nexport const TierCard = (props) => {\r\n\r\n    const data = props.data;\r\n    const listingInfo = props.info;\r\n    const id = props.id;\r\n    \r\n    const { walletAddress } = useContext(AppContext);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const lists = [];\r\n\r\n    data.mainStrings.forEach(element => {\r\n        lists.push(<div className=\"tierCardEachLineDiv\">\r\n            <div className=\"imgWrap\">\r\n                <img src={data.image} alt=\"\"></img>\r\n            </div>\r\n            <span>{element}</span>\r\n        </div>);\r\n    });   \r\n\r\n    const pushToDb = (amount) => {\r\n        let db = database.ref(\"/coinlist\");\r\n        \r\n        listingInfo.dailyCount = amount;\r\n        listingInfo.voteCount = amount;\r\n        listingInfo.dailyStart = Math.floor(Math.floor(Date.now() / 1000)/86400) * 86400;\r\n\r\n        listingInfo.weeklyCount = amount;\r\n        let updateWeeklyStart = 0;\r\n\r\n        let epochNow = Math.floor(Date.now() / 1000);\r\n        let getDayCount = Math.floor(epochNow/86400) % 7;\r\n        switch(getDayCount){\r\n            case 0:\r\n                updateWeeklyStart = (Math.floor(epochNow/86400) - 3 ) * 86400;\r\n                break;\r\n            case 1:\r\n                updateWeeklyStart = (Math.floor(epochNow/86400) - 4 ) * 86400;\r\n                break;\r\n            case 2:\r\n                updateWeeklyStart = (Math.floor(epochNow/86400) - 5 ) * 86400;\r\n                break;\r\n            case 3:\r\n                updateWeeklyStart = (Math.floor(epochNow/86400) - 6 ) * 86400;\r\n                break;\r\n            case 4:\r\n                updateWeeklyStart = (Math.floor(epochNow/86400) - 0 ) * 86400;\r\n                break;\r\n            case 5:\r\n                updateWeeklyStart = (Math.floor(epochNow/86400) - 1 ) * 86400;\r\n                break;\r\n            case 6:\r\n                updateWeeklyStart = (Math.floor(epochNow/86400) - 2 ) * 86400;\r\n                break;\r\n            default:\r\n                updateWeeklyStart = 0;\r\n                break;\r\n        }\r\n        listingInfo.weeklyStart = updateWeeklyStart;\r\n\r\n        db.push(listingInfo\r\n        ).catch(e => {\r\n            NotificationManager.error(\"Listing is failure.\");\r\n            console.log(e);\r\n        }).then(()=> {\r\n            NotificationManager.success(\"Congratulations, You requested successfully.\");\r\n        });\r\n    }\r\n\r\n    const updateToDb = (amount) => {\r\n        \r\n        let updateWeeklyStart = 0;\r\n\r\n        let epochNow = Math.floor(Date.now() / 1000);\r\n        let getDayCount = Math.floor(epochNow/86400) % 7;\r\n        switch(getDayCount){\r\n            case 0:\r\n                updateWeeklyStart = (Math.floor(epochNow/86400) - 3 ) * 86400;\r\n                break;\r\n            case 1:\r\n                updateWeeklyStart = (Math.floor(epochNow/86400) - 4 ) * 86400;\r\n                break;\r\n            case 2:\r\n                updateWeeklyStart = (Math.floor(epochNow/86400) - 5 ) * 86400;\r\n                break;\r\n            case 3:\r\n                updateWeeklyStart = (Math.floor(epochNow/86400) - 6 ) * 86400;\r\n                break;\r\n            case 4:\r\n                updateWeeklyStart = (Math.floor(epochNow/86400) - 0 ) * 86400;\r\n                break;\r\n            case 5:\r\n                updateWeeklyStart = (Math.floor(epochNow/86400) - 1 ) * 86400;\r\n                break;\r\n            case 6:\r\n                updateWeeklyStart = (Math.floor(epochNow/86400) - 2 ) * 86400;\r\n                break;\r\n            default:\r\n                updateWeeklyStart = 0;\r\n                break;\r\n        }\r\n        listingInfo.weeklyStart = updateWeeklyStart;\r\n       \r\n        let updateDb = database.ref(\"/coinlist/\" +  id );\r\n        updateDb.update({ \r\n            voteCount: amount?amount:\"\",\r\n            dailyCount: amount?amount:\"\",\r\n            dailyStart: Math.floor(Math.floor(Date.now() / 1000)/86400) * 86400,\r\n            weeklyCount: amount?amount:\"\",\r\n            weeklyStart: updateWeeklyStart\r\n        })\r\n    }\r\n\r\n    const buyBtnClicked = async () => {\r\n\r\n        let voteFee = ENVS.NORMAL_VOTE_FEE;\r\n        let voteAmount = 1;\r\n        let tgUrl = \"\";\r\n        \r\n        if(id === \"\"){\r\n            // Listing first time\r\n            if(data.headerString === \"Ruby Tier\"){\r\n                voteFee = ENVS.RUBY_TIRE_FEE;\r\n                voteAmount = ENVS.RUBY_TIRE_LIMIT;\r\n                \r\n                tgUrl = process.env.REACT_APP_SERVER_URL + \"/ruby/?token=\" + listingInfo.name;\r\n            }else if(data.headerString === \"Diamond Tier\"){\r\n                voteFee = ENVS.DIAMOND_TIRE_FEE;\r\n                voteAmount = ENVS.DIAMOND_TIRE_LIMIT;\r\n                tgUrl = process.env.REACT_APP_SERVER_URL + \"/diamond/?token=\" + listingInfo.name;\r\n            }\r\n            // console.log(\"id=null vote amount\", voteAmount);\r\n        }else{\r\n            if(data.headerString === \"Ruby Tier\" && listingInfo.voteCount < ENVS.RUBY_TIRE_LIMIT){\r\n                voteFee = ENVS.RUBY_TIRE_FEE;\r\n                voteAmount = ENVS.RUBY_TIRE_LIMIT;\r\n                tgUrl = process.env.REACT_APP_SERVER_URL + \"/diamond/?token=\" + listingInfo.name;\r\n            }else if(data.headerString === \"Diamond Tier\" && listingInfo.voteCount < ENVS.DIAMOND_TIRE_LIMIT){\r\n                voteFee = ENVS.DIAMOND_TIRE_FEE;\r\n                voteAmount = ENVS.DIAMOND_TIRE_LIMIT;\r\n                tgUrl = process.env.REACT_APP_SERVER_URL + \"/diamond/?token=\" + listingInfo.name;\r\n            }else{\r\n                NotificationManager.warning(\"You can only upgrade.\");\r\n                return;\r\n            }\r\n\r\n            // console.log(\"id not null vote amount\", voteAmount);\r\n        }\r\n\r\n        const infuraProvider = new ethers.providers.Web3Provider(window.ethereum)\r\n        const signer = infuraProvider.getSigner()\r\n\r\n        const tx = {\r\n            from: walletAddress,\r\n            to: ENVS.CHARITY_ADDR,\r\n            value: ethers.utils.parseUnits(voteFee),\r\n        };\r\n\r\n        await signer.sendTransaction(tx).then(async() => {\r\n            await fetch(`${tgUrl}`, {\r\n                method: \"GET\"\r\n            })\r\n            .then(res => {\r\n                NotificationManager.info(\"Notification about Tier upgrade has sent to TG channel.\");\r\n            })\r\n            .catch(err => console.log(err))\r\n           \r\n            if(id === \"\") pushToDb(voteAmount);\r\n            else updateToDb(voteAmount);\r\n\r\n            navigate(\"/\", {replace: true});\r\n            \r\n            // console.log(\"Notification about Tier upgrade has sent to TG channel successfully sent\");\r\n        })\r\n\r\n    }\r\n    return (\r\n        <div className=\"TierCardDiv\">\r\n            <img src={data.image} style={{position:\"absolute\", right:-20, top:-20, width: \"50px\"}} alt=\"\"></img>\r\n            <div className=\"TierCardHeadingDiv\">\r\n                <span style={{ color: data.color }}>{data.headerString}</span>\r\n            </div>\r\n            <div className=\"TierCardMainStringDiv\">\r\n                {lists}\r\n            </div>\r\n            <div className=\"TierCardBottomDiv\">\r\n                <div className=\"TierCardBottomWrapDiv\">\r\n                    <span>{data.buyAmount}</span>\r\n                    <button onClick={buyBtnClicked}>Buy Now</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TierCard;","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\Filter\\Filter.js",["128","129"],"import './Filter.css';\r\nimport emeraldImg from '../../assets/img/emerald.png';\r\nimport rubyImg from '../../assets/img/ruby.png';\r\nimport diamondImg from '../../assets/img/diamond.png';\r\nimport loadingImg from '../../assets/img/loading.svg';\r\nimport { useEffect, useState , useContext } from 'react';\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core/\";\r\nimport { database } from '../../helpers/firebase.js';\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { AppContext } from '../../context';\r\nimport watchlistImg from '../../assets/img/watchlisted.png';\r\nimport nonwatchlistImg from '../../assets/img/nonwatchlisted.png';\r\nimport axios from 'axios';\r\nimport { ENVS } from '../../helpers/configurations';\r\nimport { ethers } from \"ethers\";\r\n\r\nexport const Filter = (props) => {\r\n\r\n    const [load, setLoaded] = useState(0);\r\n    const [loading, setLoading] =useState(true);\r\n    const [allData, setAllData] = useState({});\r\n\r\n    const { walletAddress, synchroTables, handleSynchroTables } = useContext(AppContext);\r\n\r\n    const [filterOption, setFilterOption] = useState(0);\r\n    const [allShowData, setAllShowData] = useState([]);\r\n    \r\n    const [openWatchListDlg, setWatchListDlg] = useState(false);\r\n\r\n    const [rowId, setRowId] = useState(\"\");\r\n    const [wlDlgTitle, setWlDlgTitle] = useState(\"\");\r\n    \r\n    const [diamondSelected, setDiamondSelected] = useState(false);\r\n    const [rubySelected, setRubySelected] = useState(false);\r\n    const [emeraldSelected, setEmeraldSelected] = useState(false);\r\n    const [networkSelected,setNetworkSelected] = useState(0);\r\n    const [categorySelected, setCategorySelected] = useState(0);\r\n    const [showNetworkSubFilter, setShowNetworkSubFilter] = useState(\"none\");\r\n    const [showCategorySubFilter, setShowCategorySubFilter] = useState(\"none\");\r\n\r\n    const [ethSelected, setEthSelected] = useState(false);\r\n    const [bscSelected, setBSCSelected] = useState(false);\r\n    \r\n    const [networkTitle, setNetworkTitle] = useState(\"Network\");\r\n    const [categoryTitle, setCategoryTitle] = useState(\"Category\");\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n    }, [showCategorySubFilter, showNetworkSubFilter, synchroTables,\r\n        diamondSelected, rubySelected, emeraldSelected,\r\n        networkTitle, categoryTitle])\r\n\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n\r\n        setAllData({});\r\n        const dbRef = database.ref(\"/coinlist\");\r\n        dbRef.orderByChild(\"listed\").on('value', (snapshot) => {\r\n            if(snapshot.exists()){\r\n                setAllData(snapshot.val());\r\n                setAllShowDataFunc(allData);\r\n                setLoaded(1);\r\n                setLoading(false);\r\n            }else{\r\n                setAllData({});\r\n                setAllShowData([]);\r\n                setLoading(false);\r\n            }\r\n          })\r\n\r\n    },[load, rowId, walletAddress, synchroTables ])\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        setAllData({});\r\n        let dbRef = database.ref(\"/coinlist\");\r\n        if(categorySelected){\r\n            switch(filterOption) {\r\n                case 6:\r\n                    // console.log(\"Today listed\");\r\n                    let epochNow = Math.floor(Date.now() / 1000);\r\n                    dbRef.orderByChild(\"listed\").startAt(Math.floor(epochNow/86400)*86400).on('value', (snapshot) => \r\n                    {\r\n                        if(snapshot.exists()){\r\n                            setAllData(snapshot.val());\r\n                            setAllShowDataFunc(snapshot.val());\r\n                        }else{\r\n                            setAllData({});\r\n                            setAllShowData([]);\r\n                        }\r\n                    })\r\n                    break;\r\n                case 7:\r\n                    // console.log(\"Today Best\");\r\n                    dbRef.orderByChild(\"dailyCount\").limitToFirst(5).on('value', (snapshot) => \r\n                    {\r\n                        if(snapshot.exists()){\r\n                            setAllData(snapshot.val());\r\n                            setAllShowDataFunc(snapshot.val());\r\n                        }else{\r\n                            setAllData({});\r\n                            setAllShowData([]);\r\n                        }\r\n                    })\r\n                    break;\r\n                case 8:\r\n                    // console.log(\"Presale\");\r\n                    dbRef.orderByChild(\"presale\").equalTo(true).on('value', (snapshot) => \r\n                    {\r\n                        if(snapshot.exists()){\r\n                            setAllData(snapshot.val());\r\n                            setAllShowDataFunc(snapshot.val());\r\n                        }else{\r\n                            setAllData({});\r\n                            setAllShowData([]);\r\n                        }\r\n                    }) \r\n                    break;\r\n                case 9:\r\n                    // console.log(\"All time best\");\r\n                    dbRef.orderByChild(\"voteCount\").limitToFirst(5).on('value', (snapshot) => \r\n                    {\r\n                        if(snapshot.exists()){\r\n                            setAllData(snapshot.val());\r\n                            setAllShowDataFunc(snapshot.val());\r\n                        }else{\r\n                            setAllData({});\r\n                            setAllShowData([]);\r\n                        }\r\n                    })\r\n                    break;\r\n                default: \r\n                    break;\r\n            }\r\n        }\r\n        else{\r\n            const dbRef = database.ref(\"/coinlist\");\r\n            dbRef.orderByChild(\"listed\").on('value', (snapshot) => {\r\n            if(snapshot.exists()){\r\n                setAllData(snapshot.val());\r\n                setAllShowDataFunc(allData);\r\n            }else{\r\n                setAllData({});\r\n                setAllShowData([]);\r\n            }\r\n          })\r\n        }\r\n\r\n        \r\n        setLoading(false);\r\n    }, [load, synchroTables,\r\n         diamondSelected, rubySelected, emeraldSelected,\r\n        ethSelected, bscSelected,\r\n        filterOption]);\r\n\r\n    const setAllShowDataFunc = async (data) => {\r\n        let wlImg = \"\";\r\n        let tempData = [];\r\n        // console.log(data, \"data\");\r\n        for(let i in data){\r\n            \r\n            if(diamondSelected){\r\n                if(data[i].voteCount < ENVS.DIAMOND_TIRE_LIMIT) continue;\r\n            }else if(rubySelected){\r\n                if (data[i].voteCount < ENVS.RUBY_TIRE_LIMIT || data[i].voteCount >= ENVS.DIAMOND_TIRE_LIMIT ) continue;\r\n            }else if(emeraldSelected){\r\n                if (data[i].voteCount >= ENVS.RUBY_TIRE_LIMIT ) continue;\r\n            }\r\n            \r\n            if(networkSelected && bscSelected){\r\n                if(data[i].network !== \"BSC\") continue;\r\n            }else if(networkSelected && ethSelected){\r\n                if(data[i].network !== \"ETH\") continue;\r\n            }\r\n            wlImg = nonwatchlistImg;\r\n            \r\n            let wlList = data[i].watchlist;\r\n            if (wlList?.includes(walletAddress)){\r\n                wlImg = watchlistImg;\r\n            }\r\n            \r\n            let tierImg = emeraldImg;\r\n            if(data[i].voteCount >= ENVS.DIAMOND_TIRE_LIMIT) {\r\n                tierImg = diamondImg;\r\n            }else if(data[i].voteCount >= ENVS.RUBY_TIRE_LIMIT) {\r\n                tierImg = rubyImg;\r\n            }\r\n\r\n            let mcap, change24h;\r\n            if(data[i].presale === true){\r\n                mcap = \"Presale\";\r\n                change24h = \"-\"\r\n            }else{\r\n                let qs = `?symbol=${data[i].symbol}&convert=USD`;\r\n                let res = await axios.get('https://agile-cove-74302.herokuapp.com/https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest' + qs, {\r\n                        headers: { 'X-CMC_PRO_API_KEY': \"a8dd2502-9e7c-4bf6-8cd2-29d2829e042a\" }})\r\n            \r\n                let tempSymbol = data[i].symbol;\r\n                mcap = res.data.data[tempSymbol]?.quote.USD.market_cap;\r\n                change24h = res.data.data[tempSymbol]?.quote.USD.percent_change_24h;\r\n\r\n            }\r\n\r\n            tempData.push([\r\n                data[i].logo, \r\n                data[i].name, \r\n                data[i].network,\r\n                isNaN(mcap) ? mcap: floorValue(mcap),\r\n                isNaN(change24h) ?  change24h:floorValue(change24h),\r\n                convertLaunchDate(data[i].launch), \r\n                tierImg,            \r\n                data[i].voteCount, \r\n                \"\",\r\n                wlImg,\r\n                i\r\n            ]);\r\n\r\n        }\r\n        setAllShowData(tempData);\r\n        \r\n    }\r\n   \r\n    const floorValue = (value) => {\r\n        if(value > 1000000000){\r\n            return (Math.floor(value/1000000000*100)/100) + \" B\";\r\n        }\r\n        else if(value > 1000000) {\r\n            return (Math.floor(value/1000000*100)/100) + \" M\";\r\n        }else if(value > 1000){\r\n            return (Math.floor(value/1000*100)/100).toString + \" K\";\r\n        }else{\r\n            return Math.floor(value*100)/100;\r\n        }\r\n    }\r\n    \r\n    const diamondFilterClicked = () => {\r\n        if(diamondSelected){\r\n            setDiamondSelected(false);\r\n        }else{\r\n        setDiamondSelected(true);\r\n        setRubySelected(false);\r\n        setEmeraldSelected(false);}\r\n    }\r\n    const rubyFilterClicked = () => {\r\n        if(rubySelected){\r\n            setRubySelected(false);    \r\n        }else{\r\n        setDiamondSelected(false);\r\n        setRubySelected(true);\r\n        setEmeraldSelected(false);}\r\n    }\r\n    const emeraldFilterClicked = () => {\r\n        if(emeraldSelected){\r\n            setEmeraldSelected(false);    \r\n        }else {\r\n        setDiamondSelected(false);\r\n        setRubySelected(false);\r\n        setEmeraldSelected(true);}\r\n    }\r\n    const ethNetworkFilterClicked =() => {\r\n        setNetworkTitle(\"ETH\");\r\n        setNetworkSelected(true);\r\n        setEthSelected(true);\r\n        setBSCSelected(false);\r\n    }\r\n    const bscNetworkFilterClicked =() => {\r\n        setNetworkTitle(\"BSC\");\r\n        setNetworkSelected(true);\r\n        setBSCSelected(true);\r\n        setEthSelected(false);\r\n    }\r\n\r\n    const todayListedClicked =() => {\r\n        setCategoryTitle(\"Today listed\");\r\n        setCategorySelected(true);\r\n        setFilterOption(6);\r\n    }\r\n    const todayTopVoteClicked =() => {\r\n        setCategoryTitle(\"Today Best\");\r\n        setCategorySelected(true);\r\n        setFilterOption(7);\r\n    }\r\n    const presaleClicked =() => {\r\n        setCategoryTitle(\"Presale\")\r\n        setCategorySelected(true);\r\n        setFilterOption(8);\r\n    }\r\n \r\n    const topVoteClicked =() =>{\r\n        setCategoryTitle(\"All time best\");\r\n        setCategorySelected(true);\r\n        setFilterOption(9);\r\n    }\r\n \r\n    const handleOpenWatchListDlg = (id) => {\r\n        let wllist = allData[id].watchlist;\r\n\r\n        if(wllist.includes(walletAddress)){\r\n            setWlDlgTitle(\"You are going to remove this project from your Watchlist?\");\r\n        }else{\r\n            setWlDlgTitle(\"You are going to add this project to your Watchlist?\");\r\n        }\r\n        setRowId(id);\r\n        setWatchListDlg(true);\r\n    }\r\n\r\n    const handleCloseWatchListDlg = () => {\r\n        setWatchListDlg(false);\r\n    }\r\n\r\n    const convertLaunchDate = (epoch) => {\r\n        let dateDiff = 0;\r\n        let monthDiff = 0;\r\n        let yearDiff = 0;\r\n\r\n        let countNow = Math.floor(Math.floor(Date.now() / 1000) / 86400);\r\n        let launchDate = Math.floor(epoch / 86400);\r\n\r\n        if(countNow > launchDate){\r\n            dateDiff = countNow - launchDate;\r\n            if(countNow - launchDate > 365){\r\n                yearDiff = Math.floor(dateDiff / 365);\r\n                return yearDiff.toString() + \" Year Ago\";\r\n            }else if( dateDiff > 30){\r\n                monthDiff = Math.floor(dateDiff / 30);\r\n                return monthDiff.toString() + \" Mon Ago\";\r\n            }else{\r\n                dateDiff = countNow - launchDate;\r\n                return dateDiff.toString() + \" Day Ago\";\r\n            }\r\n        }else if(countNow < launchDate){\r\n            dateDiff = launchDate - countNow;\r\n            if( dateDiff > 365 ) {\r\n                yearDiff = Math.floor(dateDiff / 365);\r\n                return \"In \" +  yearDiff.toString() + \" Year\";\r\n            }\r\n            else if( dateDiff > 30 ){\r\n                monthDiff = Math.floor(dateDiff / 30);\r\n                return \"In \" +  monthDiff.toString() + \" Mon\";\r\n            }\r\n            else{\r\n                return \"In \" +  dateDiff.toString() + \" Day\";\r\n            }\r\n        }else{\r\n            return \"Today\";\r\n        }\r\n         \r\n    }\r\n\r\n    const onRowClick = (rowData, rowMeta, e) => {\r\n        \r\n        if(e.target.type === 'submit' || e.target.type === 'number') {\r\n            return;\r\n        }else\r\n        {    \r\n            navigate(\"/details/\" + rowData[10], {replace: true});\r\n        }\r\n    }\r\n\r\n    const wlBtnClicked = () => {\r\n        if (walletAddress === \"\"){\r\n            NotificationManager.error(\"You have to connect wallet first\");\r\n            return;\r\n        }\r\n\r\n        handleCloseWatchListDlg();\r\n\r\n        let wllist = allData[rowId].watchlist;\r\n        if(wllist.includes(walletAddress)){\r\n            let db = database.ref(\"/coinlist/\" + rowId);\r\n            db.update({ watchlist: wllist.replace(walletAddress + \",\", \"\") }\r\n            ).catch(e => {\r\n                NotificationManager.error(\"Can not add.\");\r\n                console.log(e);\r\n            }).then(()=> {\r\n                NotificationManager.success(\"Removed successfully.\");\r\n                // setLoaded(load + 1);\r\n                handleSynchroTables(synchroTables + 1);\r\n            });\r\n        }else{\r\n            let db = database.ref(\"/coinlist/\" + rowId);\r\n            db.update({ watchlist: allData[rowId].watchlist + walletAddress + \",\"  }\r\n            ).catch(e => {\r\n                NotificationManager.error(\"Can not add.\");\r\n                console.log(e);\r\n            }).then(()=> {\r\n                NotificationManager.success(\"Added successfully.\");\r\n                // setLoaded(load + 1);\r\n                handleSynchroTables(synchroTables + 1);\r\n            });   \r\n        }\r\n    }\r\n\r\n    const voteClicked = async (id) =>{\r\n        let dbRef = database.ref(\"/votelimit\");\r\n        let dailyStart = 0;\r\n        let dailyCount = 0;\r\n        let epochNow = Math.floor(Date.now() / 1000);\r\n        let tempId = \"\";\r\n        let ret_val = false;\r\n        dbRef.orderByChild(\"wallet\").equalTo(walletAddress).on('value', (snapshot) => \r\n        {\r\n            // wallet exists\r\n            if(snapshot.exists()){\r\n                // console.log(\"wallet exists already in vote limit table\");\r\n                let tempRow = snapshot.val();\r\n               \r\n                for(let i in tempRow){ // i = asdfawefawefx  => example\r\n                    tempId = i;\r\n                    dailyStart = tempRow[i].dailyStart;\r\n                    dailyCount = tempRow[i].dailyCount;\r\n                }\r\n\r\n                console.log(dailyCount, \"daily count\");\r\n                if(dailyCount >= 5 && (epochNow - dailyStart) <= 24*60*60 ){\r\n                    NotificationManager.error(\"You can only vote 5 times per day.\");\r\n                    ret_val = true;\r\n                }\r\n            }\r\n        })\r\n        if(ret_val) return;\r\n        const infuraProvider = new ethers.providers.Web3Provider(window.ethereum)\r\n        const signer = infuraProvider.getSigner()\r\n\r\n        const tx = {\r\n            from: walletAddress,\r\n            to: ENVS.CHARITY_ADDR,\r\n            value: ethers.utils.parseUnits(ENVS.NORMAL_VOTE_FEE),\r\n        };\r\n            \r\n        await signer.sendTransaction(tx).then(async () => {\r\n\r\n            if(tempId === \"\"){\r\n                dbRef.push({ wallet: walletAddress, dailyStart: Math.floor(epochNow/86400) * 86400, dailyCount: dailyCount + 1});\r\n            }else{\r\n                let dbRefUpdate = database.ref(\"/votelimit/\" + tempId);\r\n                dbRefUpdate.update({ dailyCount: dailyCount + 1 });\r\n            }\r\n\r\n            let db = database.ref(\"/coinlist/\" + id);\r\n\r\n            let updateDailyCount = 0;\r\n            let updateDailyStart = 0;\r\n\r\n            let updateWeeklyCount = 0;\r\n            let updateWeeklyStart = 0;\r\n\r\n            let epochNowDay = Math.floor(epochNow/86400) * 86400;\r\n            if(epochNowDay - Number(allData[id].updateWeeklyStart) > 86400 * 7){\r\n                updateWeeklyCount = 1;\r\n                let getDayCount = Math.floor(epochNow/86400) % 7;\r\n                switch(getDayCount){\r\n                    case 0:\r\n                        updateWeeklyStart = (Math.floor(epochNow/86400) - 3 ) * 86400;\r\n                        break;\r\n                    case 1:\r\n                        updateWeeklyStart = (Math.floor(epochNow/86400) - 4 ) * 86400;\r\n                        break;\r\n                    case 2:\r\n                        updateWeeklyStart = (Math.floor(epochNow/86400) - 5 ) * 86400;\r\n                        break;\r\n                    case 3:\r\n                        updateWeeklyStart = (Math.floor(epochNow/86400) - 6 ) * 86400;\r\n                        break;\r\n                    case 4:\r\n                        updateWeeklyStart = (Math.floor(epochNow/86400) - 0 ) * 86400;\r\n                        break;\r\n                    case 5:\r\n                        updateWeeklyStart = (Math.floor(epochNow/86400) - 1 ) * 86400;\r\n                        break;\r\n                    case 6:\r\n                        updateWeeklyStart = (Math.floor(epochNow/86400) - 2 ) * 86400;\r\n                        break;\r\n                    default:\r\n                        updateWeeklyStart = 0;\r\n                        break;\r\n                }\r\n            }else{\r\n                updateWeeklyStart = allData[id].weeklyStart;\r\n                updateWeeklyCount = allData[id].weeklyCount + 1;\r\n            }\r\n\r\n            if(epochNow - Number(allData[id].dailyStart) < 86400){\r\n                updateDailyCount = Number(allData[id].dailyCount) + 1;\r\n                updateDailyStart = Number(allData[id].dailyStart)\r\n            }else{\r\n                updateDailyCount = 1;\r\n                updateDailyStart = Math.floor(epochNow/86400) * 86400;\r\n            }\r\n\r\n            db.update({ voteCount: Number(allData[id].voteCount) + 1,\r\n                        dailyStart: updateDailyStart,\r\n                        dailyCount: updateDailyCount,\r\n                        weeklyStart: updateWeeklyStart,\r\n                        weeklyCount: updateWeeklyCount})\r\n            \r\n            if(Number(allData[id].voteCount) < ENVS.DIAMOND_TIRE_LIMIT && Number(allData[id].voteCount) + 1 >= ENVS.DIAMOND_TIRE_LIMIT){\r\n                await fetch(`${process.env.REACT_APP_SERVER_URL}/diamond/?token=${allData[id].name}`, {\r\n                    method: \"GET\"\r\n                })\r\n                .then(() => {\r\n                    NotificationManager.info(\"Notification about Diamond Tier has sent to TG channel.\");\r\n                })\r\n                .catch(err => console.log(err))\r\n\r\n            }else if(Number(allData[id].voteCount) < ENVS.RUBY_TIRE_LIMIT && Number(allData[id].voteCount) + 1 >= ENVS.RUBY_TIRE_LIMIT){\r\n                await fetch(`${process.env.REACT_APP_SERVER_URL}/ruby/?token=${allData[id].name}`, {\r\n                    method: \"GET\"\r\n                })\r\n                .then(() => {\r\n                    NotificationManager.info(\"Notification about Ruby has sent to TG channel.\");\r\n                })\r\n                .catch(err => console.log(err))\r\n            }else{\r\n\r\n            }\r\n        }).catch((e) => {\r\n            NotificationManager.error(\"Transaction failed.\");\r\n            console.log(e);\r\n        })\r\n\r\n        handleSynchroTables(synchroTables + 1);\r\n        setLoaded(load + 1);\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name:\"Logo\",\r\n            options:{\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <div className=\"logoImgDiv\"><img src={value} alt=\"\" /></div>\r\n                    );\r\n                }\r\n            }\r\n        }, \r\n        {\r\n            name:\"Name\",\r\n            options:{\r\n                \r\n                setCellProps: () => ({\r\n                    style: {\r\n                      whiteSpace: \"nowrap\",\r\n                      position: \"sticky\",\r\n                      backgroundColor: \"#290825\",\r\n                      left: \"0\",\r\n                      zIndex: 100\r\n                    }\r\n                }),\r\n            }\r\n        }, \r\n        \"Chain\",\r\n        \"MCAP\",\r\n        {\r\n            name:\"Change 24h\",\r\n            options:{\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    // console.log(value, \"bbbbbbb\"); \r\n                    let val = tableMeta.rowData[4];\r\n                    if (isNaN(val)){\r\n                        return (\r\n                            <div className=\"change24hDiv\" style={{ color: \"white\"}}><span>{val}</span></div>\r\n                        );\r\n                    }\r\n                    else if (val < 0){\r\n                        val = 0 - val;\r\n                        return (\r\n                            <div className=\"change24hDiv\" style={{ color: \"yellow\"}}><span>{\"- \" + val + \" %\"}</span></div>\r\n                        );\r\n                    }\r\n                    else{\r\n                        return (\r\n                            <div className=\"change24hDiv\"  style={{ color: \"green\"}}><span>{ \"+ \" + tableMeta.rowData[4] + \" %\"}</span></div>\r\n                        );\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        }, \r\n        \"Launch\",\r\n        {\r\n            name:\"Tier\",\r\n            options:{\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <div className=\"tierImgDiv\"><img src={tableMeta.rowData[6]} alt=\"\" /></div>\r\n                    );\r\n                }\r\n            }\r\n        },\r\n        \"Vote Counts\",\r\n        {\r\n            name: \"\",\r\n            options:{\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <div className=\"voteBtnDiv\">\r\n                            <Dialog\r\n                                open={openWatchListDlg}\r\n                                onClose={handleCloseWatchListDlg}\r\n                                aria-labelledby=\"alert-dialog-title\"\r\n                                aria-describedby=\"alert-dialog-description\"\r\n                            >\r\n                                <DialogTitle id=\"alert-dialog-title\">\r\n                                    {wlDlgTitle}\r\n                                </DialogTitle>\r\n                                <DialogActions>\r\n                                <Button type=\"submit\" onClick={wlBtnClicked} autoFocus>Yes</Button>\r\n                                <Button type=\"submit\" onClick={handleCloseWatchListDlg}>\r\n                                    No\r\n                                </Button>\r\n                                </DialogActions>\r\n                            </Dialog>\r\n\r\n                            <div className=\"voteBtnWrapped\">\r\n                                <button className=\"voteBtn\" onClick={() => voteClicked(tableMeta.rowData[10])}>VOTE</button>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n        },  {\r\n            name: \"WatchListed\",\r\n            options:{\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <div className=\"wlImgDiv\">\r\n                            {/* <img className=\"wlImg\"  src={tableMeta.rowData[7]} onClick={()=> handleOpenWatchListDlg(tableMeta.rowData[8])}></img> */}\r\n                            <button style={{ backgroundImage: `url(${tableMeta.rowData[9]})`, width: \"40px\", height: \"40px\", backgroundSize:\"contain\", backgroundColor:\"transparent\", border:\"none\" }} onClick={()=> handleOpenWatchListDlg(tableMeta.rowData[10])}></button>\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n            }\r\n        },{\r\n            name:\"Hidden\",\r\n            options:{\r\n                display: \"false\"\r\n            }\r\n        }  \r\n    ];\r\n   \r\n    const options = {\r\n        filter: false,\r\n        // filterType: \"dropdown\",\r\n        // responsive: \"vertical\",\r\n        responsive:\"standard\",\r\n        rowHover: true,\r\n        tableBodyMaxHeight: \"100%\",\r\n        selectableRows: 'none',\r\n        viewColumns: false,\r\n        onRowClick:onRowClick\r\n    };\r\n\r\n    // const epochToDate = (epoch) => {\r\n    //     return moment.unix(epoch).format('YYYY/MM/DD');\r\n    // }\r\n\r\n    const networkFilterClicked = () => {\r\n        if(networkSelected === true){\r\n            setNetworkSelected(false);\r\n            setEthSelected(false);\r\n            setBSCSelected(false);\r\n            setNetworkTitle(\"Network\");\r\n        }\r\n    }\r\n\r\n    const networkMouseEntered = (flag) => {\r\n        if(flag === true){\r\n            setShowNetworkSubFilter(\"block\");\r\n        }else{\r\n            setShowNetworkSubFilter(\"none\");\r\n        }\r\n    }\r\n    \r\n    const categoryFilterClicked = () => {\r\n        if(categorySelected === true){\r\n            setCategorySelected(false);\r\n            setFilterOption(0);\r\n            setCategoryTitle(\"Category\")\r\n        }\r\n    }\r\n\r\n    const categoryMouseEntered = (flag) => {\r\n        if(flag === true){\r\n            setShowCategorySubFilter(\"block\");\r\n        }else{\r\n            setShowCategorySubFilter(\"none\");\r\n        }\r\n    }\r\n    const getMuiThemeForFilter = () =>\r\n        createTheme({\r\n            overrides: {\r\n                MuiTableCell:{\r\n                    body:{\r\n                        color: \"white\",\r\n                        fontWeight:\"bold\",\r\n                        fontSize: \"20px\",\r\n                        \r\n                        // borderColor: \"#669999\"\r\n                    },\r\n                    root:{\r\n                        textAlign:\"center\"\r\n                        // borderColor: \"#669999\",\r\n                    },\r\n                },\r\n                MUIDataTableBodyRow: {\r\n                    root: {\r\n                        backgroundColor: \"#290825\",\r\n                        color:\"white\",\r\n                        // borderColor:\"#669999\",\r\n                        '&:hover': {\r\n                            backgroundColor: '#669999 !important'\r\n                        },\r\n                        height: \"30px\"\r\n                    }\r\n                },\r\n                MUIDataTableBodyCell:{\r\n                    root:{\r\n                        textAlign: \"center\"\r\n                    }\r\n                },\r\n                MUIDataTableFooter: {\r\n                root: {\r\n                    backgroundColor: \"#290825\",\r\n                    color:\"white\",\r\n                    // borderColor:\"#669999\"\r\n                }\r\n                },\r\n                MUIDataTableFilter: {\r\n                    root: {\r\n                    backgroundColor: \"#669999\",\r\n                    }\r\n                },\r\n                \r\n                MUIDataTable:{\r\n                    paper:\r\n                    {width: \"99%\",\r\n                // borderColor: \"#290825\",\r\n                color: \"white\"}\r\n                \r\n                }\r\n                ,\r\n                MUIDataTableToolbar: {\r\n                root: {\r\n                    backgroundColor: \"#290825\"\r\n                }\r\n                },\r\n                MUIDataTableHeadCell: {\r\n\r\n                    fixedHeader:{\r\n                        backgroundColor:\"#290825\",\r\n                        color: \"white\",\r\n                        alignContent:'center',\r\n                        \r\n\r\n                    },\r\n                    data:{\r\n                        color: \"white\",\r\n                        \r\n\r\n                    },\r\n                    sortActive:{\r\n                        color: \"white\",\r\n                        alignItems: \"center !important\",\r\n                        \r\n                    },\r\n                    sortAction: {\r\n                        alignItems:\"center\",\r\n                        justifyContent:\"center\"\r\n                    },\r\n                    contentWrapper:{\r\n                        justifyContent:\"center\",\r\n                        textAlign:\"center\"\r\n                    }\r\n                },\r\n                MuiSvgIcon:{\r\n                    root:{\r\n                        color: \"white\"\r\n                    }\r\n                },\r\n                MUIDataTableSearch:{\r\n                    searchIcon:{\r\n                        color: \"white\"\r\n                    },\r\n                    searchText:{\r\n                        color: \"white\"\r\n                    }\r\n                },\r\n                // MuiInput: {\r\n                // root:{\r\n                //     color: \"green\"\r\n                // },input:{\r\n                //     color:\"green\"\r\n                // }\r\n                // },\r\n                // MuiButton: {\r\n                // root:{\r\n                //     alignItems:\"center\",\r\n                //      color: \"blue\"                \r\n                // },\r\n                // textPrimary:{\r\n                //     color: \"blue\"\r\n                // }\r\n                // },\r\n                MuiTableSortLabel:{\r\n                    root: {\r\n                        color:\"white !important\"   \r\n                    },\r\n                    active: {\r\n                        color:\"white !important\"   \r\n                    },\r\n                    icon: {\r\n                        color:\"white !important\"\r\n                    },\r\n                    iconDirectionAsc:{\r\n                        color: \"white !important\"\r\n                    },\r\n                    iconDirectionDesc:{\r\n                        color: \"white !important\"\r\n                    }\r\n                },\r\n                MuiTablePagination:{\r\n                    root:{\r\n                        color:\"white\"\r\n                    }\r\n                },\r\n                MuiSelect:{\r\n                    icon:{\r\n                        color:\"white\"\r\n                    },\r\n                    root:{\r\n                        color:\"white\"\r\n                    }\r\n                }\r\n                // , MuiPaper:\r\n                // {\r\n                //     root:{\r\n                //         backgroundColor:\"#1e7981\"\r\n                //     }\r\n                // }\r\n            }\r\n    });\r\n\r\n    return(\r\n        <div className=\"filterDivWrapped\">\r\n            {loading === false ? (\r\n                <div className=\"filterDiv\">\r\n                            \r\n                    <div className=\"filterOptionDiv\">\r\n                        <div className=\"diamondFilterDiv\">\r\n                            {diamondSelected === true? (\r\n                                <div className=\"diamondFilterWrappedDiv\" style={{ backgroundImage:\"linear-gradient(to right, #DC1Bd9, #4EB4C3)\" }} onClick={diamondFilterClicked}>\r\n                                    <img src={diamondImg} alt=\"diamondLogo\" />\r\n                                    <span>&nbsp;Diamond</span>\r\n                                </div>):\r\n                            (\r\n                                <div className=\"diamondFilterWrappedDiv\" onClick={diamondFilterClicked}>\r\n                                    <img src={diamondImg} alt=\"diamondLogo\" />\r\n                                    <span>&nbsp;Diamond</span>\r\n                                </div>\r\n                            )}\r\n                            \r\n                        </div>\r\n\r\n                        <div className=\"rubyFilterDiv\">\r\n                            {rubySelected === true? (\r\n                            <div className=\"rubyFilterWrappedDiv\" style={{ backgroundImage: \"linear-gradient(to right, #DC1Bd9, #4EB4C3)\"}} onClick={rubyFilterClicked}>\r\n                                <img src={rubyImg} alt=\"rubyLogo\" />\r\n                                <span>&nbsp;Ruby</span>\r\n                            </div>):(<div className=\"rubyFilterWrappedDiv\" onClick={rubyFilterClicked}>\r\n                                <img src={rubyImg} alt=\"rubyLogo\" />\r\n                                <span>&nbsp;Ruby</span>\r\n                            </div>)}\r\n                            \r\n                        </div>\r\n\r\n                        <div className=\"emeraldFilterDiv\">\r\n                            {emeraldSelected === true?(\r\n                                <div className=\"emeraldFilterWrappedDiv\" style={{ backgroundImage:\"linear-gradient(to right, #DC1Bd9, #4EB4C3)\" }} onClick={emeraldFilterClicked}>\r\n                                    <img src={emeraldImg} alt=\"emeraldLogo\" />\r\n                                    <span>&nbsp;Emerald</span>\r\n                                </div>\r\n                            ):(\r\n                                <div className=\"emeraldFilterWrappedDiv\" onClick={emeraldFilterClicked}>\r\n                                <img src={emeraldImg} alt=\"emeraldLogo\" />\r\n                                <span>&nbsp;Emerald</span>\r\n                            </div>\r\n                            )}\r\n                           \r\n                        </div>\r\n\r\n                        <div className=\"networkFilterDiv\" onClick={networkFilterClicked} onMouseEnter={() => networkMouseEntered(true)} onMouseLeave={() => networkMouseEntered(false)}>\r\n                            <div className=\"networkTitleDiv\">\r\n                                {networkSelected === true ? (\r\n                                <div className=\"networkFilterTitleWrappedDiv\" onClick={networkFilterClicked} style={{ backgroundImage:\"linear-gradient(to right, #DC1Bd9, #4EB4C3)\" }}>\r\n                                    <span>&nbsp;{networkTitle}</span>\r\n                                </div>\r\n                                ):(\r\n                                <div className=\"networkFilterTitleWrappedDiv\" >\r\n                                    <span>&nbsp;{networkTitle}</span>\r\n                                </div>)}\r\n                                </div>\r\n                               \r\n                            <div className=\"networkSubfilterDiv\" style={{ display : showNetworkSubFilter }}>\r\n                                <div className=\"subFilterETH\" onClick={ethNetworkFilterClicked}>- ETH</div>\r\n                                <div className=\"subFilterBSC\" onClick={bscNetworkFilterClicked}>- BSC</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"categoryFilterDiv\" onMouseEnter={() => categoryMouseEntered(true)}  onMouseLeave={() => categoryMouseEntered(false)}>\r\n                            <div className=\"categoryTitleDiv\">\r\n                                {categorySelected === true? (\r\n                                <div className=\"categoryFilterWrappedDiv\" onClick={categoryFilterClicked} style={{ backgroundImage:\"linear-gradient(to right, #DC1Bd9, #4EB4C3)\" }}>\r\n                                    <span>&nbsp;{categoryTitle}</span>\r\n                                </div>):(\r\n                                <div className=\"categoryFilterWrappedDiv\" onClick={categoryFilterClicked}>\r\n                                    <span>&nbsp;{categoryTitle}</span>\r\n                                </div>)}\r\n                                \r\n                            </div>\r\n                           \r\n                            <div className=\"categorySubfilterDiv\" style={{ display :  showCategorySubFilter }}>\r\n                                <div className=\"topVoteDiv\" onClick={topVoteClicked}>- All time best</div>\r\n                                <div className=\"todayTopVoteDiv\" onClick={todayTopVoteClicked}>- Today's best</div>\r\n                                <div className=\"todayListedDiv\" onClick={todayListedClicked}>- Today Listed</div>   \r\n                                <div className=\"presaleDiv\" onClick={presaleClicked}>- Presale</div>\r\n                            </div>\r\n                             \r\n                        </div>\r\n                    </div>\r\n               \r\n                    <ThemeProvider theme={getMuiThemeForFilter()}>\r\n                        <MUIDataTable data={allShowData} columns={columns} options={options} />\r\n                    </ThemeProvider >\r\n\r\n                </div>\r\n            ):(\r\n                <div className=\"filterDiv\">  \r\n                        \r\n                    <div className=\"filterOptionDiv\" style={{ overflowX: \"hidden\"}}>\r\n                        <div className=\"diamondFilterDiv\">\r\n                            {diamondSelected === true? (\r\n                                <div className=\"diamondFilterWrappedDiv\" style={{ backgroundImage:\"linear-gradient(to right, #DC1Bd9, #4EB4C3)\" }} onClick={diamondFilterClicked}>\r\n                                    <img src={diamondImg} alt=\"diamondLogo\" />\r\n                                    <span>&nbsp;Diamond</span>\r\n                                </div>):\r\n                            (\r\n                                <div className=\"diamondFilterWrappedDiv\" onClick={diamondFilterClicked}>\r\n                                    <img src={diamondImg} alt=\"diamondLogo\" />\r\n                                    <span>&nbsp;Diamond</span>\r\n                                </div>\r\n                            )}\r\n                            \r\n                        </div>\r\n\r\n                        <div className=\"rubyFilterDiv\">\r\n                            {rubySelected === true? (\r\n                            <div className=\"rubyFilterWrappedDiv\" style={{ backgroundImage: \"linear-gradient(to right, #DC1Bd9, #4EB4C3)\"}} onClick={rubyFilterClicked}>\r\n                                <img src={rubyImg} alt=\"rubyLogo\" />\r\n                                <span>&nbsp;Ruby</span>\r\n                            </div>):(<div className=\"rubyFilterWrappedDiv\" onClick={rubyFilterClicked}>\r\n                                <img src={rubyImg} alt=\"rubyLogo\" />\r\n                                <span>&nbsp;Ruby</span>\r\n                            </div>)}\r\n                            \r\n                        </div>\r\n\r\n                        <div className=\"emeraldFilterDiv\">\r\n                            {emeraldSelected === true?(\r\n                                <div className=\"emeraldFilterWrappedDiv\" style={{ backgroundImage:\"linear-gradient(to right, #DC1Bd9, #4EB4C3)\" }} onClick={emeraldFilterClicked}>\r\n                                    <img src={emeraldImg} alt=\"emeraldLogo\" />\r\n                                    <span>&nbsp;Emerald</span>\r\n                                </div>\r\n                            ):(\r\n                                <div className=\"emeraldFilterWrappedDiv\" onClick={emeraldFilterClicked}>\r\n                                <img src={emeraldImg} alt=\"emeraldLogo\" />\r\n                                <span>&nbsp;Emerald</span>\r\n                            </div>\r\n                            )}\r\n                           \r\n                        </div>\r\n\r\n                        <div className=\"networkFilterDiv\" onClick={networkFilterClicked} onMouseEnter={() => networkMouseEntered(true)} onMouseLeave={() => networkMouseEntered(false)}>\r\n                            <div className=\"networkTitleDiv\">\r\n                                {networkSelected === true ? (\r\n                                <div className=\"networkFilterTitleWrappedDiv\" onClick={networkFilterClicked} style={{ backgroundImage:\"linear-gradient(to right, #DC1Bd9, #4EB4C3)\" }}>\r\n                                    <span>&nbsp;{networkTitle}</span>\r\n                                </div>\r\n                                ):(\r\n                                <div className=\"networkFilterTitleWrappedDiv\" >\r\n                                    <span>&nbsp;{networkTitle}</span>\r\n                                </div>)}\r\n                                </div>\r\n                               \r\n                                <div className=\"networkSubfilterDiv\" style={{ display : showNetworkSubFilter }}>\r\n                                    <div className=\"subFilterETH\" onClick={ethNetworkFilterClicked}>- ETH</div>\r\n                                    <div className=\"subFilterBSC\" onClick={bscNetworkFilterClicked}>- BSC</div>\r\n                                </div>  \r\n                        </div>\r\n\r\n                        <div className=\"categoryFilterDiv\" onMouseEnter={() => categoryMouseEntered(true)}  onMouseLeave={() => categoryMouseEntered(false)}>\r\n                            <div className=\"categoryTitleDiv\">\r\n                                {categorySelected === true? (\r\n                                <div className=\"categoryFilterWrappedDiv\" onClick={categoryFilterClicked} style={{ backgroundImage:\"linear-gradient(to right, #DC1Bd9, #4EB4C3)\" }}>\r\n                                    <span>&nbsp;{categoryTitle}</span>\r\n                                </div>):(\r\n                                <div className=\"categoryFilterWrappedDiv\" onClick={categoryFilterClicked}>\r\n                                    <span>&nbsp;{categoryTitle}</span>\r\n                                </div>)}\r\n                                \r\n                            </div>\r\n                        \r\n                            <div className=\"categorySubfilterDiv\" style={{ display :  showCategorySubFilter }}>\r\n                                <div className=\"topVoteDiv\" onClick={topVoteClicked}>- All time best</div>\r\n                                <div className=\"todayTopNitroDiv\" onClick={todayTopVoteClicked}>- Today's best</div>\r\n                                <div className=\"todayListedDiv\" onClick={todayListedClicked}>- Today Listed</div>\r\n                                <div className=\"presaleDiv\" onClick={presaleClicked}>- Presale</div>\r\n                            </div>\r\n                             \r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"loadingDiv\">\r\n                            <img src={loadingImg} alt=\"loading\" />\r\n                        </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter;","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\DetailInfo\\DetailInfo.js",["130"],"import { ENVS } from '../../helpers/configurations';\r\nimport emeraldImg from '../../assets/img/emerald.png';\r\nimport rubyImg from '../../assets/img/ruby.png';\r\nimport diamondImg from '../../assets/img/diamond.png';\r\nimport arrowImg from '../../assets/img/arrow_up.svg';\r\nimport {useState,useEffect}  from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './DetailInfo.css';\r\n\r\nexport const DetailInfo = (props) => {\r\n    const data = props.data;\r\n    const id = props.id;\r\n    \r\n   const [loading, setLoading] = useState(true);\r\n   const [upgradable, setUpgradable] = useState(false);\r\n   const [tierString, setTierString] = useState(\"\");\r\n   const [tierImg, setTierImg] = useState(\"\");\r\n\r\n   const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        setLoading(false);\r\n\r\n        if(data.voteCount < ENVS.DIAMOND_TIRE_LIMIT){\r\n            setUpgradable(true);\r\n        }\r\n\r\n        if(data.voteCount >= ENVS.DIAMOND_TIRE_LIMIT){\r\n            setTierString(\"Diamond Tier \");\r\n            setTierImg(diamondImg);\r\n        }else if(data.voteCount >= ENVS.RUBY_TIRE_LIMIT){\r\n            setTierString(\"Ruby Tier\");\r\n            setTierImg(rubyImg);\r\n        }else{\r\n            setTierString(\"Emerald Tier\");\r\n            setTierImg(emeraldImg);\r\n        }\r\n    }, [loading])\r\n\r\n    const upgradeClicked = (data) => {\r\n        navigate(\"/tiers/\", {state:{info:data, id:id}});\r\n    }\r\n    return (\r\n        <div className=\"detailInfoDiv\">\r\n            <div className=\"detailInfoWrappedDiv\">\r\n                <div className=\"detailInfoTitleDiv\">\r\n                    Coin Information\r\n                </div>\r\n                <div className=\"detailInfoContentDiv\">\r\n                    KYC&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;{data.kyc}\r\n                </div>\r\n                <div className=\"detailInfoContentDiv\">\r\n                    Audit&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;{data.audit}\r\n                </div>\r\n                <div className=\"detailInfoContentTierDiv\">\r\n                    Tier&emsp;&emsp;&emsp;&emsp;\r\n\r\n                    <div className=\"tierInfoDivWrapped\">\r\n                        <div className=\"tierInfoDiv\">\r\n                            {tierString}&nbsp;<img src={tierImg} alt=\"\"/>\r\n                        </div>\r\n                        \r\n                        {upgradable === true? \r\n                            (<div className=\"upgradeTierDiv\" onClick={() => upgradeClicked(data)}>\r\n                            {upgradable}\r\n                            upgrade <img src={arrowImg} alt=\"\" />\r\n                        </div>):(<div></div>)}\r\n                    </div>\r\n                </div>\r\n                <div className=\"detailInfoContentDiv\">\r\n                    Votes&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;{data.voteCount}\r\n                </div>\r\n                <div className=\"detailInfoContentDiv\">\r\n                    Votes Today&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;{data.dailyCount}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}r\n\r\nexport default DetailInfo;","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\Overview\\Overview.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\components\\DetailMarket\\DetailMarket.js",["131","132"],"import './DetailMarket.css';\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { ENVS } from '../../helpers/configurations';\r\nimport { useGetLivePrice } from \"react-pancakeswap-token-price\";\r\n\r\nexport const DetailMarket = (props) => {\r\n  \r\n    const data = props.data;\r\n    const symbol = data.symbol;\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [mcap, setMCAP] = useState(0);\r\n    const [change24h, setChange] = useState(0);\r\n    const [price, setPrice] = useState(0);\r\n    const [c_supply, setSupply] = useState(0);\r\n\r\n    useEffect(() => {\r\n\r\n        const contractAddr = data.contractAddr; \r\n        const symbol  = data.symbol;\r\n\r\n        const fetchData = async () => {\r\n            // console.log(data, \"data\", data.symbol);\r\n           \r\n            if(data.presale === false){\r\n        \r\n                let qs = `?symbol=${symbol}&convert=USD`;\r\n                let res = await axios.get('https://agile-cove-74302.herokuapp.com/https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest' + qs, {\r\n                        headers: { 'X-CMC_PRO_API_KEY': \"a8dd2502-9e7c-4bf6-8cd2-29d2829e042a\" }})\r\n                \r\n                let t_price, t_mcap, t_change24h,t_cir_supply;\r\n                t_price = res.data.data[symbol]?.quote.USD.price;\r\n                t_mcap = res.data.data[symbol]?.quote.USD.market_cap;\r\n                t_change24h = res.data.data[symbol]?.quote.USD.percent_change_24h;\r\n                t_cir_supply = res.data.data[symbol]?.circulating_supply;\r\n                \r\n                setMCAP(typeof t_mcap !== undefined ? t_mcap: 0);\r\n                setPrice(typeof t_price !== undefined ? t_price: 0);\r\n                setChange(typeof t_change24h !== undefined ? t_change24h: 0);\r\n                setSupply(typeof t_cir_supply !== undefined ? t_cir_supply: 0);\r\n                \r\n                setLoading(false);\r\n            }   \r\n        }\r\n        fetchData();\r\n\r\n    }, [symbol, data])\r\n    console.log(\"=====\", );\r\n    // useEffect(()=>{\r\n        useGetLivePrice()\r\n            .getPrice(\"0xAe9269f27437f0fcBC232d39Ec814844a51d6b8f\")\r\n            .then((res) => {\r\n                console.log(\"------\",res)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n    // }, [])\r\n\r\n\r\n    const floorValue = (value) => {\r\n        if(value > 1000000000){\r\n            return (Math.floor(value/1000000000*100)/100) + \" B\";\r\n        }\r\n        else if(value > 1000000) {\r\n            return (Math.floor(value/1000000*100)/100) + \" M\";\r\n        }else if(value > 1000){\r\n            return (Math.floor(value/1000*100)/100) + \" K\";\r\n        }else{\r\n            return Math.floor(value*100)/100;\r\n        }\r\n    }\r\n\r\n    // useEffect(()=>{\r\n    //     getPrice('0xAe9269f27437f0fcBC232d39Ec814844a51d6b8f')\r\n    //     .then((res)=> console.log(\"token price\", res))\r\n    //   }, [])\r\n    \r\n    return (\r\n        <div className=\"detailMarketDiv\">\r\n            {loading === false ? ( \r\n                <div className=\"detailMarketWrappedDiv\">\r\n                    <div className=\"detailMarketTitleDiv\">\r\n                        Coin Market Data\r\n                    </div>\r\n                    <div className=\"detailMarketContentDiv\">\r\n                        Price(USD)&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;{price === 0 ? \"\": floorValue(price)}\r\n                    </div>\r\n                    <div className=\"detailMarketContentDiv\">\r\n                        Price Change(24 hrs)&emsp;&nbsp;&nbsp;&nbsp;{change24h === 0 ? \"\": floorValue(change24h)}\r\n                    </div>\r\n                    <div className=\"detailMarketContentDiv\">\r\n                        Market Cap&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;{mcap === 0 ? \"\": floorValue(mcap)}\r\n                    </div>\r\n                    <div className=\"detailMarketContentDiv\">\r\n                        Circulating Supply&emsp;&emsp;&emsp;{c_supply === 0 ? \"\": floorValue(c_supply)}\r\n                    </div>\r\n                  </div>\r\n                ):(<div className=\"detailMarketWrappedDiv\">\r\n                <div className=\"detailMarketTitleDiv\">\r\n                    Coin Market Data\r\n                </div>\r\n                <div className=\"detailMarketContentDiv\">\r\n                    Price(USD)&emsp;\r\n                </div>\r\n                <div className=\"detailMarketContentDiv\">\r\n                    Price Change(24 hrs)&emsp;\r\n                </div>\r\n                <div className=\"detailMarketContentDiv\">\r\n                    Market Cap&emsp;\r\n                </div>\r\n                <div className=\"detailMarketContentDiv\">\r\n                    Circulating Supply\r\n                </div>\r\n               \r\n              </div>)}\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DetailMarket;","C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\helpers\\configurations\\index.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\helpers\\interact.js",[],"C:\\Users\\USER\\Desktop\\coinlocator\\frontend\\src\\helpers\\contract.js",[],{"ruleId":"133","severity":1,"message":"134","line":39,"column":12,"nodeType":"135","messageId":"136","endLine":39,"endColumn":25},{"ruleId":"133","severity":1,"message":"137","line":39,"column":27,"nodeType":"135","messageId":"136","endLine":39,"endColumn":43},{"ruleId":"133","severity":1,"message":"138","line":40,"column":12,"nodeType":"135","messageId":"136","endLine":40,"endColumn":23},{"ruleId":"133","severity":1,"message":"139","line":18,"column":19,"nodeType":"135","messageId":"136","endLine":18,"endColumn":25},{"ruleId":"140","severity":1,"message":"141","line":49,"column":6,"nodeType":"142","endLine":49,"endColumn":21,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":26,"column":17,"nodeType":"146","endLine":26,"endColumn":42},{"ruleId":"144","severity":1,"message":"145","line":84,"column":21,"nodeType":"146","endLine":84,"endColumn":49},{"ruleId":"140","severity":1,"message":"147","line":110,"column":7,"nodeType":"142","endLine":110,"endColumn":50,"suggestions":"148"},{"ruleId":"133","severity":1,"message":"149","line":4,"column":10,"nodeType":"135","messageId":"136","endLine":4,"endColumn":24},{"ruleId":"140","severity":1,"message":"150","line":78,"column":7,"nodeType":"142","endLine":78,"endColumn":51,"suggestions":"151"},{"ruleId":"140","severity":1,"message":"152","line":158,"column":8,"nodeType":"142","endLine":161,"endColumn":22,"suggestions":"153"},{"ruleId":"140","severity":1,"message":"154","line":38,"column":8,"nodeType":"142","endLine":38,"endColumn":17,"suggestions":"155"},{"ruleId":"133","severity":1,"message":"156","line":4,"column":10,"nodeType":"135","messageId":"136","endLine":4,"endColumn":14},{"ruleId":"133","severity":1,"message":"157","line":20,"column":15,"nodeType":"135","messageId":"136","endLine":20,"endColumn":27},"no-unused-vars","'submitClicked' is assigned a value but never used.","Identifier","unusedVar","'setSubmitClicked' is assigned a value but never used.","'listingInfo' is assigned a value but never used.","'signer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleWalletAddress', 'onChangeWalletListener', and 'onConnectWalletHandler'. Either include them or remove the dependency array.","ArrayExpression",["158"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'filterStr'. Either include it or remove the dependency array.",["159"],"'buyDiamondTier' is defined but never used.","React Hook useEffect has missing dependencies: 'allData' and 'setAllShowDataFunc'. Either include them or remove the dependency array.",["160"],"React Hook useEffect has missing dependencies: 'allData', 'categorySelected', and 'setAllShowDataFunc'. Either include them or remove the dependency array.",["161"],"React Hook useEffect has a missing dependency: 'data.voteCount'. Either include it or remove the dependency array.",["162"],"'ENVS' is defined but never used.","'contractAddr' is assigned a value but never used.",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [handleWalletAddress, onChangeWalletListener, onConnectWalletHandler, walletAddress]",{"range":"173","text":"174"},"Update the dependencies array to be: [load, rowId, walletAddress, synchroTables, filterStr]",{"range":"175","text":"176"},"Update the dependencies array to be: [load, rowId, walletAddress, synchroTables, setAllShowDataFunc, allData]",{"range":"177","text":"178"},"Update the dependencies array to be: [load, synchroTables, diamondSelected, rubySelected, emeraldSelected, ethSelected, bscSelected, filterOption, categorySelected, setAllShowDataFunc, allData]",{"range":"179","text":"180"},"Update the dependencies array to be: [data.voteCount, loading]",{"range":"181","text":"182"},[1556,1571],"[handleWalletAddress, onChangeWalletListener, onConnectWalletHandler, walletAddress]",[4782,4825],"[load, rowId, walletAddress, synchroTables, filterStr]",[3168,3212],"[load, rowId, walletAddress, synchroTables, setAllShowDataFunc, allData]",[6301,6438],"[load, synchroTables, diamondSelected, rubySelected, emeraldSelected, ethSelected, bscSelected, filterOption, categorySelected, setAllShowDataFunc, allData]",[1287,1296],"[data.voteCount, loading]"]