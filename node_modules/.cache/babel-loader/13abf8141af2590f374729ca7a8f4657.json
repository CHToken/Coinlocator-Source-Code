{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { getContractWithSigner } from \"./contract\";\nexport const buyNitrogem = async (walletAddress, nitrogemAmount, bnbAmount) => {\n  const contract = getContractWithSigner();\n  try {\n    let txhash = await contract.buyNitrogem(nitrogemAmount, {\n      value: ethers.utils.parseUnits(bnbAmount, 18),\n      from: walletAddress\n    });\n    let res = await txhash.wait();\n    if (res.transactionHash) {\n      return {\n        success: true,\n        status: \"Successfully bought.\"\n      };\n    } else {\n      return {\n        success: false,\n        status: \"Buy Transaction failed.\"\n      };\n    }\n  } catch (e) {\n    return {\n      success: false,\n      status: e.message\n    };\n  }\n};\nexport const buyRubyTier = async (walletAddress, bnbAmount) => {\n  const contract = getContractWithSigner();\n  try {\n    let txhash = await contract.buyRubyTier({\n      value: ethers.utils.parseUnits(bnbAmount, 18),\n      from: walletAddress\n    });\n    let res = await txhash.wait();\n    if (res.transactionHash) {\n      return {\n        success: true,\n        status: \"Successfully bought.\"\n      };\n    } else {\n      return {\n        success: false,\n        status: \"Buy Transaction failed.\"\n      };\n    }\n  } catch (e) {\n    return {\n      success: false,\n      status: e.message\n    };\n  }\n};\nexport const buyDiamondTier = async (walletAddress, bnbAmount) => {\n  const contract = getContractWithSigner();\n  try {\n    let txhash = await contract.buyDiamondTier({\n      value: ethers.utils.parseUnits(bnbAmount, 18),\n      from: walletAddress\n    });\n    let res = await txhash.wait();\n    if (res.transactionHash) {\n      return {\n        success: true,\n        status: \"Successfully bought.\"\n      };\n    } else {\n      return {\n        success: false,\n        status: \"Buy Transaction failed.\"\n      };\n    }\n  } catch (e) {\n    console.log(e, \"buy diamond tier\");\n    return {\n      success: false,\n      status: e.message\n    };\n  }\n};\nexport const voteWithNitrogem = async (walletAddress, nitroAmount) => {\n  const contract = getContractWithSigner();\n  try {\n    let txhash = await contract.voteWithNitrogem(nitroAmount, {\n      from: walletAddress\n    });\n    let res = await txhash.wait();\n    if (res.transactionHash) {\n      return {\n        success: true,\n        status: \"Successfully added.\"\n      };\n    } else {\n      return {\n        success: false,\n        status: \"Add Transaction failed.\"\n      };\n    }\n  } catch (e) {\n    return {\n      success: false,\n      status: e.message\n    };\n  }\n};","map":{"version":3,"names":["ethers","getContractWithSigner","buyNitrogem","walletAddress","nitrogemAmount","bnbAmount","contract","txhash","value","utils","parseUnits","from","res","wait","transactionHash","success","status","e","message","buyRubyTier","buyDiamondTier","console","log","voteWithNitrogem","nitroAmount"],"sources":["C:/Users/USER/Desktop/coinlocator/frontend/src/helpers/interact.js"],"sourcesContent":["import { ethers } from \"ethers\"\r\nimport { getContractWithSigner } from \"./contract\"\r\n\r\nexport const buyNitrogem = async (\r\n  walletAddress,\r\n  nitrogemAmount,\r\n  bnbAmount\r\n) => {\r\n\r\n  const contract = getContractWithSigner();\r\n  \r\n  try {\r\n    let txhash = await contract.buyNitrogem(nitrogemAmount, {\r\n      value: ethers.utils.parseUnits(bnbAmount, 18),\r\n      from: walletAddress,\r\n    })\r\n    let res = await txhash.wait();\r\n\r\n    if(res.transactionHash) {\r\n      return{\r\n        success: true,\r\n        status: \"Successfully bought.\"\r\n      }\r\n    }\r\n    else{\r\n      return{\r\n        success: false,\r\n        status: \"Buy Transaction failed.\",\r\n      }\r\n    } \r\n  } catch(e) {\r\n    return {\r\n      success: false,\r\n      status: e.message,\r\n    }\r\n  }\r\n}\r\n\r\nexport const buyRubyTier = async (\r\n  walletAddress,\r\n  bnbAmount\r\n) => {\r\n\r\n  const contract = getContractWithSigner();\r\n  \r\n  try {\r\n    let txhash = await contract.buyRubyTier({\r\n      value: ethers.utils.parseUnits(bnbAmount, 18),\r\n      from: walletAddress,\r\n    })\r\n    let res = await txhash.wait();\r\n\r\n    if(res.transactionHash) {\r\n      return{\r\n        success: true,\r\n        status: \"Successfully bought.\"\r\n      }\r\n    }\r\n    else{\r\n      return{\r\n        success: false,\r\n        status: \"Buy Transaction failed.\",\r\n      }\r\n    } \r\n  } catch(e) {\r\n    return {\r\n      success: false,\r\n      status: e.message,\r\n    }\r\n  }\r\n}\r\n\r\nexport const buyDiamondTier = async (\r\n  walletAddress,\r\n  bnbAmount\r\n) => {\r\n\r\n  const contract = getContractWithSigner();\r\n  \r\n  try {\r\n    let txhash = await contract.buyDiamondTier({\r\n      value: ethers.utils.parseUnits(bnbAmount, 18),\r\n      from: walletAddress,\r\n    })\r\n    let res = await txhash.wait();\r\n\r\n    if(res.transactionHash) {\r\n      return{\r\n        success: true,\r\n        status: \"Successfully bought.\"\r\n      }\r\n    }\r\n    else{\r\n      return{\r\n        success: false,\r\n        status: \"Buy Transaction failed.\",\r\n      }\r\n    } \r\n  } catch(e) {\r\n    console.log(e, \"buy diamond tier\");\r\n    return {\r\n      success: false,\r\n      status: e.message,\r\n    }\r\n  }\r\n}\r\n\r\nexport const voteWithNitrogem = async (\r\n  walletAddress,\r\n  nitroAmount\r\n) => {\r\n\r\n  const contract = getContractWithSigner();\r\n  \r\n  try {\r\n    let txhash = await contract.voteWithNitrogem(nitroAmount, {\r\n      from: walletAddress,\r\n    })\r\n    let res = await txhash.wait();\r\n\r\n    if(res.transactionHash) {\r\n      return{\r\n        success: true,\r\n        status: \"Successfully added.\"\r\n      }\r\n    }\r\n    else{\r\n      return{\r\n        success: false,\r\n        status: \"Add Transaction failed.\",\r\n      }\r\n    } \r\n  } catch(e) {\r\n    return {\r\n      success: false,\r\n      status: e.message,\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}