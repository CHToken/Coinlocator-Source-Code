{"ast":null,"code":"import firebase from '@firebase/app';\nimport { __extends, __spreadArray, __awaiter, __generator, __assign } from 'tslib';\nimport { FirebaseError } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n/**\r\n * Domain name for firebase storage.\r\n */\nvar DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\nvar CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\nvar DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\nvar DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\nvar FirebaseStorageError = /** @class */function (_super) {\n  __extends(FirebaseStorageError, _super);\n  /**\r\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\r\n   *  added to the end of the message.\r\n   * @param message  - Error message.\r\n   */\n  function FirebaseStorageError(code, message) {\n    var _this = _super.call(this, prependCode(code), \"Firebase Storage: \" + message + \" (\" + prependCode(code) + \")\") || this;\n    /**\r\n     * Stores custom error data unque to FirebaseStorageError.\r\n     */\n    _this.customData = {\n      serverResponse: null\n    };\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(_this, FirebaseStorageError.prototype);\n    return _this;\n  }\n  /**\r\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\r\n   */\n  FirebaseStorageError.prototype._codeEquals = function (code) {\n    return prependCode(code) === this.code;\n  };\n  Object.defineProperty(FirebaseStorageError.prototype, \"message\", {\n    /**\r\n     * Error message including serverResponse if available.\r\n     */\n    get: function () {\n      if (this.customData.serverResponse) {\n        return this.message + \"\\n\" + this.customData.serverResponse;\n      } else {\n        return this.message;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseStorageError.prototype, \"serverResponse\", {\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\n    get: function () {\n      return this.customData.serverResponse;\n    },\n    set: function (serverResponse) {\n      this.customData.serverResponse = serverResponse;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return FirebaseStorageError;\n}(FirebaseError);\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\nfunction unknown() {\n  var message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new FirebaseStorageError(\"unknown\" /* UNKNOWN */, message);\n}\nfunction objectNotFound(path) {\n  return new FirebaseStorageError(\"object-not-found\" /* OBJECT_NOT_FOUND */, \"Object '\" + path + \"' does not exist.\");\n}\nfunction quotaExceeded(bucket) {\n  return new FirebaseStorageError(\"quota-exceeded\" /* QUOTA_EXCEEDED */, \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\nfunction unauthenticated() {\n  var message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new FirebaseStorageError(\"unauthenticated\" /* UNAUTHENTICATED */, message);\n}\nfunction unauthorized(path) {\n  return new FirebaseStorageError(\"unauthorized\" /* UNAUTHORIZED */, \"User does not have permission to access '\" + path + \"'.\");\n}\nfunction retryLimitExceeded() {\n  return new FirebaseStorageError(\"retry-limit-exceeded\" /* RETRY_LIMIT_EXCEEDED */, 'Max retry time for operation exceeded, please try again.');\n}\nfunction canceled() {\n  return new FirebaseStorageError(\"canceled\" /* CANCELED */, 'User canceled the upload/download.');\n}\nfunction invalidUrl(url) {\n  return new FirebaseStorageError(\"invalid-url\" /* INVALID_URL */, \"Invalid URL '\" + url + \"'.\");\n}\nfunction invalidDefaultBucket(bucket) {\n  return new FirebaseStorageError(\"invalid-default-bucket\" /* INVALID_DEFAULT_BUCKET */, \"Invalid default bucket '\" + bucket + \"'.\");\n}\nfunction noDefaultBucket() {\n  return new FirebaseStorageError(\"no-default-bucket\" /* NO_DEFAULT_BUCKET */, 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\nfunction cannotSliceBlob() {\n  return new FirebaseStorageError(\"cannot-slice-blob\" /* CANNOT_SLICE_BLOB */, 'Cannot slice blob for upload. Please retry the upload.');\n}\nfunction serverFileWrongSize() {\n  return new FirebaseStorageError(\"server-file-wrong-size\" /* SERVER_FILE_WRONG_SIZE */, 'Server recorded incorrect upload file size, please retry the upload.');\n}\nfunction noDownloadURL() {\n  return new FirebaseStorageError(\"no-download-url\" /* NO_DOWNLOAD_URL */, 'The given file does not have any download URLs.');\n}\nfunction invalidArgument(message) {\n  return new FirebaseStorageError(\"invalid-argument\" /* INVALID_ARGUMENT */, message);\n}\nfunction appDeleted() {\n  return new FirebaseStorageError(\"app-deleted\" /* APP_DELETED */, 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n */\nfunction invalidRootOperation(name) {\n  return new FirebaseStorageError(\"invalid-root-operation\" /* INVALID_ROOT_OPERATION */, \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\nfunction invalidFormat(format, message) {\n  return new FirebaseStorageError(\"invalid-format\" /* INVALID_FORMAT */, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\nfunction internalError(message) {\n  throw new FirebaseStorageError(\"internal-error\" /* INTERNAL_ERROR */, 'Internal error: ' + message);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\nvar StringFormat = {\n  /**\r\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n   * sequence.\r\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n   */\n  RAW: 'raw',\n  /**\r\n   * Indicates the string should be interpreted as base64-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64: 'base64',\n  /**\r\n   * Indicates the string should be interpreted as base64url-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64URL: 'base64url',\n  /**\r\n   * Indicates the string is a data URL, such as one obtained from\r\n   * canvas.toDataURL().\r\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n   * becomes the byte sequence\r\n   * 69 a6 9a\r\n   * (the content-type \"application/octet-stream\" is also applied, but can\r\n   * be overridden in the metadata object).\r\n   */\n  DATA_URL: 'data_url'\n};\nvar StringData = /** @class */function () {\n  function StringData(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n  return StringData;\n}();\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  }\n  // assert(false);\n  throw unknown();\n}\nfunction utf8Bytes_(value) {\n  var b = [];\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            var hi = c;\n            var lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\nfunction percentEncodedBytes_(value) {\n  var decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        var hasMinus = value.indexOf('-') !== -1;\n        var hasUnder = value.indexOf('_') !== -1;\n        if (hasMinus || hasUnder) {\n          var invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n        break;\n      }\n    case StringFormat.BASE64URL:\n      {\n        var hasPlus = value.indexOf('+') !== -1;\n        var hasSlash = value.indexOf('/') !== -1;\n        if (hasPlus || hasSlash) {\n          var invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  var bytes;\n  try {\n    bytes = atob(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  var array = new Uint8Array(bytes.length);\n  for (var i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\nvar DataURLParts = /** @class */function () {\n  function DataURLParts(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    var matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n    var middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n  return DataURLParts;\n}();\nfunction dataURLBytes_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\nfunction dataURLContentType_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\nfunction endsWith(s, end) {\n  var longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n  return s.substring(s.length - end.length) === end;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An event that is triggered on a task.\r\n */\nvar TaskEvent = {\n  /**\r\n   * For this event,\r\n   * <ul>\r\n   *   <li>The `next` function is triggered on progress updates and when the\r\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n   *       argument.</li>\r\n   *   <li>The `error` function is triggered if the upload is canceled or fails\r\n   *       for another reason.</li>\r\n   *   <li>The `complete` function is triggered if the upload completes\r\n   *       successfully.</li>\r\n   * </ul>\r\n   */\n  STATE_CHANGED: 'state_changed'\n};\n/**\r\n * Represents the current state of a running upload.\r\n */\nvar TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\" /* RUNNING */:\n    case \"pausing\" /* PAUSING */:\n    case \"canceling\" /* CANCELING */:\n      return TaskState.RUNNING;\n    case \"paused\" /* PAUSED */:\n      return TaskState.PAUSED;\n    case \"success\" /* SUCCESS */:\n      return TaskState.SUCCESS;\n    case \"canceled\" /* CANCELED */:\n      return TaskState.CANCELED;\n    case \"error\" /* ERROR */:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\nvar ErrorCode;\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\r\n * doesn't work in React Native on Android.\r\n */\nvar NetworkXhrIo = /** @class */function () {\n  function NetworkXhrIo() {\n    var _this = this;\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(function (resolve) {\n      _this.xhr_.addEventListener('abort', function () {\n        _this.errorCode_ = ErrorCode.ABORT;\n        resolve(_this);\n      });\n      _this.xhr_.addEventListener('error', function () {\n        _this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve(_this);\n      });\n      _this.xhr_.addEventListener('load', function () {\n        resolve(_this);\n      });\n    });\n  }\n  /**\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.send = function (url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (var key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  };\n  /**\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.getErrorCode = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  };\n  /**\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.getStatus = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  };\n  /**\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.getResponseText = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  };\n  /**\r\n   * Aborts the request.\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.abort = function () {\n    this.xhr_.abort();\n  };\n  /**\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.getResponseHeader = function (header) {\n    return this.xhr_.getResponseHeader(header);\n  };\n  /**\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  };\n  /**\r\n   * @override\r\n   */\n  NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  };\n  return NetworkXhrIo;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Factory-like class for creating XhrIo instances.\r\n */\nvar XhrIoPool = /** @class */function () {\n  function XhrIoPool() {}\n  XhrIoPool.prototype.createXhrIo = function () {\n    return new NetworkXhrIo();\n  };\n  return XhrIoPool;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\nvar Location = /** @class */function () {\n  function Location(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n  Object.defineProperty(Location.prototype, \"path\", {\n    get: function () {\n      return this.path_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Location.prototype, \"isRoot\", {\n    get: function () {\n      return this.path.length === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Location.prototype.fullServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  };\n  Location.prototype.bucketOnlyServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  };\n  Location.makeFromBucketSpec = function (bucketString) {\n    var bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  };\n  Location.makeFromUrl = function (url) {\n    var location = null;\n    var bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    var gsPath = '(/(.*))?$';\n    var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    var gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    var version = 'v[A-Za-z0-9_]+';\n    var firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\\\.');\n    var firebaseStoragePath = '(/([^?#]*).*)?$';\n    var firebaseStorageRegExp = new RegExp(\"^https?://\" + firebaseStorageHost + \"/\" + version + \"/b/\" + bucketDomain + \"/o\" + firebaseStoragePath, 'i');\n    var firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    var cloudStorageHost = '(?:storage.googleapis.com|storage.cloud.google.com)';\n    var cloudStoragePath = '([^?#]*)';\n    var cloudStorageRegExp = new RegExp(\"^https?://\" + cloudStorageHost + \"/\" + bucketDomain + \"/\" + cloudStoragePath, 'i');\n    var cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    var groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n    for (var i = 0; i < groups.length; i++) {\n      var group = groups[i];\n      var captures = group.regex.exec(url);\n      if (captures) {\n        var bucketValue = captures[group.indices.bucket];\n        var pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  };\n  return Location;\n}();\n\n/**\r\n * A request whose promise always fails.\r\n */\nvar FailRequest = /** @class */function () {\n  function FailRequest(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n  FailRequest.prototype.getPromise = function () {\n    return this.promise_;\n  };\n  /** @inheritDoc */\n  FailRequest.prototype.cancel = function (_appDelete) {};\n  return FailRequest;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\nfunction start(f,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ncallback, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  var waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var timeoutId = null;\n  var hitTimeout = false;\n  var cancelState = 0;\n  function canceled() {\n    return cancelState === 2;\n  }\n  var triggeredCallback = false;\n  function triggerCallback() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n  function callWithDelay(millis) {\n    timeoutId = setTimeout(function () {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n  function handler(success) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call.apply(triggerCallback, __spreadArray([null, success], args));\n      return;\n    }\n    var mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call.apply(triggerCallback, __spreadArray([null, success], args));\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    var waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  var stopped = false;\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(function () {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\nfunction stop(id) {\n  id(false);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isJustDef(p) {\n  return p !== void 0;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(\"Invalid value for '\" + argument + \"'. Expected \" + minValue + \" or greater.\");\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\"Invalid value for '\" + argument + \"'. Expected \" + maxValue + \" or less.\");\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction makeUrl(urlPart) {\n  return \"https://\" + DEFAULT_HOST + \"/v0\" + urlPart;\n}\nfunction makeQueryString(params) {\n  var encode = encodeURIComponent;\n  var queryPart = '?';\n  for (var key in params) {\n    if (params.hasOwnProperty(key)) {\n      var nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar NetworkRequest = /** @class */function () {\n  function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {\n    var _this = this;\n    this.pendingXhr_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise(function (resolve, reject) {\n      _this.resolve_ = resolve;\n      _this.reject_ = reject;\n      _this.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n  NetworkRequest.prototype.start_ = function () {\n    var self = this;\n    function doTheRequest(backoffCallback, canceled) {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      var xhr = self.pool_.createXhrIo();\n      self.pendingXhr_ = xhr;\n      function progressListener(progressEvent) {\n        var loaded = progressEvent.loaded;\n        var total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        xhr.addUploadProgressListener(progressListener);\n      }\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      xhr.send(self.url_, self.method_, self.body_, self.headers_).then(function (xhr) {\n        if (self.progressCallback_ !== null) {\n          xhr.removeUploadProgressListener(progressListener);\n        }\n        self.pendingXhr_ = null;\n        xhr = xhr;\n        var hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\n        var status = xhr.getStatus();\n        if (!hitServer || self.isRetryStatusCode_(status)) {\n          var wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n        var successCode = self.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, xhr));\n      });\n    }\n    /**\r\n     * @param requestWentThrough - True if the request eventually went\r\n     *     through, false if it hit the retry limit or was canceled.\r\n     */\n    function backoffDone(requestWentThrough, status) {\n      var resolve = self.resolve_;\n      var reject = self.reject_;\n      var xhr = status.xhr;\n      if (status.wasSuccessCode) {\n        try {\n          var result = self.callback_(xhr, xhr.getResponseText());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (xhr !== null) {\n          var err = unknown();\n          err.serverResponse = xhr.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(xhr, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            var err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            var err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  };\n  /** @inheritDoc */\n  NetworkRequest.prototype.getPromise = function () {\n    return this.promise_;\n  };\n  /** @inheritDoc */\n  NetworkRequest.prototype.cancel = function (appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingXhr_ !== null) {\n      this.pendingXhr_.abort();\n    }\n  };\n  NetworkRequest.prototype.isRetryStatusCode_ = function (status) {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    var isFiveHundredCode = status >= 500 && status < 600;\n    var extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429];\n    var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  };\n  return NetworkRequest;\n}();\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\nvar RequestEndStatus = /** @class */function () {\n  function RequestEndStatus(wasSuccessCode, xhr, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.xhr = xhr;\n    this.canceled = !!canceled;\n  }\n  return RequestEndStatus;\n}();\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\nfunction makeRequest(requestInfo, appId, authToken, pool, firebaseVersion) {\n  var queryPart = makeQueryString(requestInfo.urlParams);\n  var url = requestInfo.url + queryPart;\n  var headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\nfunction getBlob() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    var bb = new BlobBuilder();\n    for (var i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\"unsupported-environment\" /* UNSUPPORTED_ENVIRONMENT */, \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\nvar FbsBlob = /** @class */function () {\n  function FbsBlob(data, elideCopy) {\n    var size = 0;\n    var blobType = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n  FbsBlob.prototype.size = function () {\n    return this.size_;\n  };\n  FbsBlob.prototype.type = function () {\n    return this.type_;\n  };\n  FbsBlob.prototype.slice = function (startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      var realBlob = this.data_;\n      var sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  };\n  FbsBlob.getBlob = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (isNativeBlobDefined()) {\n      var blobby = args.map(function (val) {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      var uint8Arrays = args.map(function (val) {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      var finalLength_1 = 0;\n      uint8Arrays.forEach(function (array) {\n        finalLength_1 += array.byteLength;\n      });\n      var merged_1 = new Uint8Array(finalLength_1);\n      var index_1 = 0;\n      uint8Arrays.forEach(function (array) {\n        for (var i = 0; i < array.length; i++) {\n          merged_1[index_1++] = array[i];\n        }\n      });\n      return new FbsBlob(merged_1, true);\n    }\n  };\n  FbsBlob.prototype.uploadData = function () {\n    return this.data_;\n  };\n  return FbsBlob;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\nfunction jsonObjectOrNull(s) {\n  var obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n/**\r\n * @return Null if the path is already at the root.\r\n */\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n  var index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  var newPath = path.slice(0, index);\n  return newPath;\n}\nfunction child(path, childPath) {\n  var canonicalChildPath = childPath.split('/').filter(function (component) {\n    return component.length > 0;\n  }).join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\nfunction lastComponent(path) {\n  var index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction noXform_(metadata, value) {\n  return value;\n}\nvar Mapping = /** @class */function () {\n  function Mapping(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n  return Mapping;\n}();\nvar mappings_ = null;\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n  var mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n  var nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  var sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\nfunction addRef(metadata, service) {\n  function generateRef() {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\nfunction fromResource(service, resource, mappings) {\n  var metadata = {};\n  metadata['type'] = 'file';\n  var len = mappings.length;\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n  addRef(metadata, service);\n  return metadata;\n}\nfunction fromResourceString(service, resourceString, mappings) {\n  var obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  var resource = obj;\n  return fromResource(service, resource, mappings);\n}\nfunction downloadUrlFromResourceString(metadata, resourceString) {\n  var obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  var tokens = obj['downloadTokens'];\n  if (tokens.length === 0) {\n    return null;\n  }\n  var encode = encodeURIComponent;\n  var tokensList = tokens.split(',');\n  var urls = tokensList.map(function (token) {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    var base = makeUrl(urlPart);\n    var queryString = makeQueryString({\n      alt: 'media',\n      token: token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\nfunction toResourceString(metadata, mappings) {\n  var resource = {};\n  var len = mappings.length;\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar PREFIXES_KEY = 'prefixes';\nvar ITEMS_KEY = 'items';\nfunction fromBackendResponse(service, bucket, resource) {\n  var listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (var _i = 0, _a = resource[PREFIXES_KEY]; _i < _a.length; _i++) {\n      var path = _a[_i];\n      var pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      var reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n      listResult.prefixes.push(reference);\n    }\n  }\n  if (resource[ITEMS_KEY]) {\n    for (var _b = 0, _c = resource[ITEMS_KEY]; _b < _c.length; _b++) {\n      var item = _c[_b];\n      var reference = service._makeStorageReference(new Location(bucket, item['name']));\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\nfunction fromResponseString(service, bucket, resourceString) {\n  var obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  var resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\nvar RequestInfo = /** @class */function () {\n  function RequestInfo(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n  return RequestInfo;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\r\n */\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n  return handler;\n}\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    var listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n  return handler;\n}\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text);\n  }\n  return handler;\n}\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    var newErr;\n    if (xhr.getStatus() === 401) {\n      newErr = unauthenticated();\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction objectErrorHandler(location) {\n  var shared = sharedErrorHandler(location);\n  function errorHandler(xhr, err) {\n    var newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction getMetadata(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction list(service, location, delimiter, pageToken, maxResults) {\n  var urlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  var urlPart = location.bucketOnlyServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\nfunction getDownloadUrl(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction updateMetadata(service, location, metadata, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'PATCH';\n  var body = toResourceString(metadata, mappings);\n  var headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction deleteObject(service, location) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'DELETE';\n  var timeout = service.maxOperationRetryTime;\n  function handler(_xhr, _text) {}\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\nfunction metadataForUpload_(location, blob, metadata) {\n  var metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n  function genBoundary() {\n    var str = '';\n    for (var i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  var boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  var metadata_ = metadataForUpload_(location, blob, metadata);\n  var metadataString = toResourceString(metadata_, mappings);\n  var preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  var postBlobPart = '\\r\\n--' + boundary + '--';\n  var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  var urlParams = {\n    name: metadata_['fullPath']\n  };\n  var url = makeUrl(urlPart);\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\nvar ResumableUploadStatus = /** @class */function () {\n  function ResumableUploadStatus(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n  return ResumableUploadStatus;\n}();\nfunction checkResumeHeader_(xhr, allowed) {\n  var status = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  var allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var metadataForUpload = metadataForUpload_(location, blob, metadata);\n  var urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  var url = makeUrl(urlPart);\n  var method = 'POST';\n  var headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var body = toResourceString(metadataForUpload, mappings);\n  var timeout = service.maxUploadRetryTime;\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    var url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url;\n  }\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\nfunction getResumableUploadStatus(service, location, url, blob) {\n  var headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n  function handler(xhr) {\n    var status = checkResumeHeader_(xhr, ['active', 'final']);\n    var sizeString = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n    var size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\nvar RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  var status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  var bytesLeft = status_.total - status_.current;\n  var bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  var startByte = status_.current;\n  var endByte = startByte + bytesToUpload;\n  var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  var headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': status_.current\n  };\n  var body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    var newCurrent = status_.current + bytesToUpload;\n    var size = blob.size();\n    var metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar Observer = /** @class */function () {\n  function Observer(nextOrObserver, error, complete) {\n    var asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      var observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n  return Observer;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction async(f) {\n  return function () {\n    var argsToForward = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      argsToForward[_i] = arguments[_i];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(function () {\n      return f.apply(void 0, argsToForward);\n    });\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\nvar UploadTask = /** @class */function () {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  function UploadTask(ref, blob, metadata) {\n    var _this = this;\n    if (metadata === void 0) {\n      metadata = null;\n    }\n    /**\r\n     * Number of bytes transferred so far.\r\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\" /* RUNNING */;\n    this._errorHandler = function (error) {\n      _this._request = undefined;\n      _this._chunkMultiplier = 1;\n      if (error._codeEquals(\"canceled\" /* CANCELED */)) {\n        _this._needToFetchStatus = true;\n        _this.completeTransitions_();\n      } else {\n        _this._error = error;\n        _this._transition(\"error\" /* ERROR */);\n      }\n    };\n\n    this._metadataErrorHandler = function (error) {\n      _this._request = undefined;\n      if (error._codeEquals(\"canceled\" /* CANCELED */)) {\n        _this.completeTransitions_();\n      } else {\n        _this._error = error;\n        _this._transition(\"error\" /* ERROR */);\n      }\n    };\n\n    this._promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n      _this._start();\n    });\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, function () {});\n  }\n  UploadTask.prototype._makeProgressCallback = function () {\n    var _this = this;\n    var sizeBefore = this._transferred;\n    return function (loaded) {\n      return _this._updateProgress(sizeBefore + loaded);\n    };\n  };\n  UploadTask.prototype._shouldDoResumable = function (blob) {\n    return blob.size() > 256 * 1024;\n  };\n  UploadTask.prototype._start = function () {\n    if (this._state !== \"running\" /* RUNNING */) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  };\n  UploadTask.prototype._resolveToken = function (callback) {\n    var _this = this;\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._ref.storage._getAuthToken().then(function (authToken) {\n      switch (_this._state) {\n        case \"running\" /* RUNNING */:\n          callback(authToken);\n          break;\n        case \"canceling\" /* CANCELING */:\n          _this._transition(\"canceled\" /* CANCELED */);\n          break;\n        case \"pausing\" /* PAUSING */:\n          _this._transition(\"paused\" /* PAUSED */);\n          break;\n      }\n    });\n  };\n  // TODO(andysoto): assert false\n  UploadTask.prototype._createResumable = function () {\n    var _this = this;\n    this._resolveToken(function (authToken) {\n      var requestInfo = createResumableUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);\n      var createRequest = _this._ref.storage._makeRequest(requestInfo, authToken);\n      _this._request = createRequest;\n      createRequest.getPromise().then(function (url) {\n        _this._request = undefined;\n        _this._uploadUrl = url;\n        _this._needToFetchStatus = false;\n        _this.completeTransitions_();\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._fetchStatus = function () {\n    var _this = this;\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    var url = this._uploadUrl;\n    this._resolveToken(function (authToken) {\n      var requestInfo = getResumableUploadStatus(_this._ref.storage, _this._ref._location, url, _this._blob);\n      var statusRequest = _this._ref.storage._makeRequest(requestInfo, authToken);\n      _this._request = statusRequest;\n      statusRequest.getPromise().then(function (status) {\n        status = status;\n        _this._request = undefined;\n        _this._updateProgress(status.current);\n        _this._needToFetchStatus = false;\n        if (status.finalized) {\n          _this._needToFetchMetadata = true;\n        }\n        _this.completeTransitions_();\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._continueUpload = function () {\n    var _this = this;\n    var chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    var status = new ResumableUploadStatus(this._transferred, this._blob.size());\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    var url = this._uploadUrl;\n    this._resolveToken(function (authToken) {\n      var requestInfo;\n      try {\n        requestInfo = continueResumableUpload(_this._ref._location, _this._ref.storage, url, _this._blob, chunkSize, _this._mappings, status, _this._makeProgressCallback());\n      } catch (e) {\n        _this._error = e;\n        _this._transition(\"error\" /* ERROR */);\n        return;\n      }\n      var uploadRequest = _this._ref.storage._makeRequest(requestInfo, authToken);\n      _this._request = uploadRequest;\n      uploadRequest.getPromise().then(function (newStatus) {\n        _this._increaseMultiplier();\n        _this._request = undefined;\n        _this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          _this._metadata = newStatus.metadata;\n          _this._transition(\"success\" /* SUCCESS */);\n        } else {\n          _this.completeTransitions_();\n        }\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._increaseMultiplier = function () {\n    var currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  };\n  UploadTask.prototype._fetchMetadata = function () {\n    var _this = this;\n    this._resolveToken(function (authToken) {\n      var requestInfo = getMetadata(_this._ref.storage, _this._ref._location, _this._mappings);\n      var metadataRequest = _this._ref.storage._makeRequest(requestInfo, authToken);\n      _this._request = metadataRequest;\n      metadataRequest.getPromise().then(function (metadata) {\n        _this._request = undefined;\n        _this._metadata = metadata;\n        _this._transition(\"success\" /* SUCCESS */);\n      }, _this._metadataErrorHandler);\n    });\n  };\n  UploadTask.prototype._oneShotUpload = function () {\n    var _this = this;\n    this._resolveToken(function (authToken) {\n      var requestInfo = multipartUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);\n      var multipartRequest = _this._ref.storage._makeRequest(requestInfo, authToken);\n      _this._request = multipartRequest;\n      multipartRequest.getPromise().then(function (metadata) {\n        _this._request = undefined;\n        _this._metadata = metadata;\n        _this._updateProgress(_this._blob.size());\n        _this._transition(\"success\" /* SUCCESS */);\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._updateProgress = function (transferred) {\n    var old = this._transferred;\n    this._transferred = transferred;\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  };\n  UploadTask.prototype._transition = function (state) {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case \"canceling\" /* CANCELING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case \"pausing\" /* PAUSING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case \"running\" /* RUNNING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        var wasPaused = this._state === \"paused\" /* PAUSED */;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case \"paused\" /* PAUSED */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"canceled\" /* CANCELED */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"error\" /* ERROR */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"success\" /* SUCCESS */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n    }\n  };\n  UploadTask.prototype.completeTransitions_ = function () {\n    switch (this._state) {\n      case \"pausing\" /* PAUSING */:\n        this._transition(\"paused\" /* PAUSED */);\n        break;\n      case \"canceling\" /* CANCELING */:\n        this._transition(\"canceled\" /* CANCELED */);\n        break;\n      case \"running\" /* RUNNING */:\n        this._start();\n        break;\n    }\n  };\n  Object.defineProperty(UploadTask.prototype, \"snapshot\", {\n    /**\r\n     * A snapshot of the current task state.\r\n     */\n    get: function () {\n      var externalState = taskStateFromInternalTaskState(this._state);\n      return {\n        bytesTransferred: this._transferred,\n        totalBytes: this._blob.size(),\n        state: externalState,\n        metadata: this._metadata,\n        task: this,\n        ref: this._ref\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Adds a callback for an event.\r\n   * @param type - The type of event to listen for.\r\n   * @param nextOrObserver -\r\n   *     The `next` function, which gets called for each item in\r\n   *     the event stream, or an observer object with some or all of these three\r\n   *     properties (`next`, `error`, `complete`).\r\n   * @param error - A function that gets called with a `FirebaseStorageError`\r\n   *     if the event stream ends due to an error.\r\n   * @param completed - A function that gets called if the\r\n   *     event stream ends normally.\r\n   * @returns\r\n   *     If only the event argument is passed, returns a function you can use to\r\n   *     add callbacks (see the examples above). If more than just the event\r\n   *     argument is passed, returns a function you can call to unregister the\r\n   *     callbacks.\r\n   */\n  UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {\n    var _this = this;\n    var observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return function () {\n      _this._removeObserver(observer);\n    };\n  };\n  /**\r\n   * This object behaves like a Promise, and resolves with its snapshot data\r\n   * when the upload completes.\r\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n   * @param onRejected - The rejection callback.\r\n   */\n  UploadTask.prototype.then = function (onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  };\n  /**\r\n   * Equivalent to calling `then(null, onRejected)`.\r\n   */\n  UploadTask.prototype.catch = function (onRejected) {\n    return this.then(null, onRejected);\n  };\n  /**\r\n   * Adds the given observer.\r\n   */\n  UploadTask.prototype._addObserver = function (observer) {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  };\n  /**\r\n   * Removes the given observer.\r\n   */\n  UploadTask.prototype._removeObserver = function (observer) {\n    var i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  };\n  UploadTask.prototype._notifyObservers = function () {\n    var _this = this;\n    this._finishPromise();\n    var observers = this._observers.slice();\n    observers.forEach(function (observer) {\n      _this._notifyObserver(observer);\n    });\n  };\n  UploadTask.prototype._finishPromise = function () {\n    if (this._resolve !== undefined) {\n      var triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          var toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  };\n  UploadTask.prototype._notifyObserver = function (observer) {\n    var externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n    }\n  };\n  /**\r\n   * Resumes a paused task. Has no effect on a currently running or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  UploadTask.prototype.resume = function () {\n    var valid = this._state === \"paused\" /* PAUSED */ || this._state === \"pausing\" /* PAUSING */;\n    if (valid) {\n      this._transition(\"running\" /* RUNNING */);\n    }\n\n    return valid;\n  };\n  /**\r\n   * Pauses a currently running task. Has no effect on a paused or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  UploadTask.prototype.pause = function () {\n    var valid = this._state === \"running\" /* RUNNING */;\n    if (valid) {\n      this._transition(\"pausing\" /* PAUSING */);\n    }\n\n    return valid;\n  };\n  /**\r\n   * Cancels a currently running or paused task. Has no effect on a complete or\r\n   * failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  UploadTask.prototype.cancel = function () {\n    var valid = this._state === \"running\" /* RUNNING */ || this._state === \"pausing\" /* PAUSING */;\n    if (valid) {\n      this._transition(\"canceling\" /* CANCELING */);\n    }\n\n    return valid;\n  };\n  return UploadTask;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\nvar Reference = /** @class */function () {\n  function Reference(_service, location) {\n    this._service = _service;\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location);\n    }\n  }\n  /**\r\n   * Returns the URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n  Reference.prototype.toString = function () {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  };\n  Reference.prototype._newRef = function (service, location) {\n    return new Reference(service, location);\n  };\n  Object.defineProperty(Reference.prototype, \"root\", {\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\n    get: function () {\n      var location = new Location(this._location.bucket, '');\n      return this._newRef(this._service, location);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"bucket\", {\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\n    get: function () {\n      return this._location.bucket;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"fullPath\", {\n    /**\r\n     * The full path of this object.\r\n     */\n    get: function () {\n      return this._location.path;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"name\", {\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\n    get: function () {\n      return lastComponent(this._location.path);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"storage\", {\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\n    get: function () {\n      return this._service;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\n    get: function () {\n      var newPath = parent(this._location.path);\n      if (newPath === null) {\n        return null;\n      }\n      var location = new Location(this._location.bucket, newPath);\n      return new Reference(this._service, location);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Utility function to throw an error in methods that do not accept a root reference.\r\n   */\n  Reference.prototype._throwIfRoot = function (name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  };\n  return Reference;\n}();\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\nfunction listAll(ref) {\n  var accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(function () {\n    return accumulator;\n  });\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\nfunction listAllHelper(ref, accumulator, pageToken) {\n  return __awaiter(this, void 0, void 0, function () {\n    var opt, nextPage;\n    var _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          opt = {\n            // maxResults is 1000 by default.\n            pageToken: pageToken\n          };\n          return [4 /*yield*/, list$1(ref, opt)];\n        case 1:\n          nextPage = _c.sent();\n          (_a = accumulator.prefixes).push.apply(_a, nextPage.prefixes);\n          (_b = accumulator.items).push.apply(_b, nextPage.items);\n          if (!(nextPage.nextPageToken != null)) return [3 /*break*/, 3];\n          return [4 /*yield*/, listAllHelper(ref, accumulator, nextPage.nextPageToken)];\n        case 2:\n          _c.sent();\n          _c.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\nfunction list$1(ref, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, op, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (options != null) {\n            if (typeof options.maxResults === 'number') {\n              validateNumber('options.maxResults', /* minValue= */1, /* maxValue= */1000, options.maxResults);\n            }\n          }\n          return [4 /*yield*/, ref.storage._getAuthToken()];\n        case 1:\n          authToken = _a.sent();\n          op = options || {};\n          requestInfo = list(ref.storage, ref._location, /*delimiter= */'/', op.pageToken, op.maxResults);\n          return [2 /*return*/, ref.storage._makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * A promise that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\nfunction getMetadata$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('getMetadata');\n          return [4 /*yield*/, ref.storage._getAuthToken()];\n        case 1:\n          authToken = _a.sent();\n          requestInfo = getMetadata(ref.storage, ref._location, getMappings());\n          return [2 /*return*/, ref.storage._makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A promise that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\nfunction updateMetadata$1(ref, metadata) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('updateMetadata');\n          return [4 /*yield*/, ref.storage._getAuthToken()];\n        case 1:\n          authToken = _a.sent();\n          requestInfo = updateMetadata(ref.storage, ref._location, metadata, getMappings());\n          return [2 /*return*/, ref.storage._makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A promise that resolves with the download\r\n *     URL for this object.\r\n */\nfunction getDownloadURL(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('getDownloadURL');\n          return [4 /*yield*/, ref.storage._getAuthToken()];\n        case 1:\n          authToken = _a.sent();\n          requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n          return [2 /*return*/, ref.storage._makeRequest(requestInfo, authToken).getPromise().then(function (url) {\n            if (url === null) {\n              throw noDownloadURL();\n            }\n            return url;\n          })];\n      }\n    });\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A promise that resolves if the deletion succeeds.\r\n */\nfunction deleteObject$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('deleteObject');\n          return [4 /*yield*/, ref.storage._getAuthToken()];\n        case 1:\n          authToken = _a.sent();\n          requestInfo = deleteObject(ref.storage, ref._location);\n          return [2 /*return*/, ref.storage._makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\nfunction _getChild(ref, childPath) {\n  var newPath = child(ref._location.path, childPath);\n  var location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\nfunction refFromPath(ref, path) {\n  if (ref instanceof StorageService) {\n    var service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    var reference = new Reference(service, service._bucket);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      if (path.includes('..')) {\n        throw invalidArgument('`path` param cannot contain \"..\"');\n      }\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\nfunction ref(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof StorageService) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\nfunction extractBucket(config) {\n  var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString);\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @public\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n */\nvar StorageService = /** @class */function () {\n  function StorageService(\n  /**\r\n   * FirebaseApp associated with this StorageService instance.\r\n   */\n  app, _authProvider, _pool, _url, _firebaseVersion) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._pool = _pool;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url);\n    } else {\n      this._bucket = extractBucket(this.app.options);\n    }\n  }\n  Object.defineProperty(StorageService.prototype, \"maxUploadRetryTime\", {\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\n    get: function () {\n      return this._maxUploadRetryTime;\n    },\n    set: function (time) {\n      validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n      this._maxUploadRetryTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StorageService.prototype, \"maxOperationRetryTime\", {\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\n    get: function () {\n      return this._maxOperationRetryTime;\n    },\n    set: function (time) {\n      validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n      this._maxOperationRetryTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  StorageService.prototype._getAuthToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var auth, tokenData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            auth = this._authProvider.getImmediate({\n              optional: true\n            });\n            if (!auth) return [3 /*break*/, 2];\n            return [4 /*yield*/, auth.getToken()];\n          case 1:\n            tokenData = _a.sent();\n            if (tokenData !== null) {\n              return [2 /*return*/, tokenData.accessToken];\n            }\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Stop running requests and prevent more from being created.\r\n   */\n  StorageService.prototype._delete = function () {\n    this._deleted = true;\n    this._requests.forEach(function (request) {\n      return request.cancel();\n    });\n    this._requests.clear();\n    return Promise.resolve();\n  };\n  /**\r\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n   * at the given Location.\r\n   */\n  StorageService.prototype._makeStorageReference = function (loc) {\n    return new Reference(this, loc);\n  };\n  /**\r\n   * @param requestInfo - HTTP RequestInfo object\r\n   * @param authToken - Firebase auth token\r\n   */\n  StorageService.prototype._makeRequest = function (requestInfo, authToken) {\n    var _this = this;\n    if (!this._deleted) {\n      var request_1 = makeRequest(requestInfo, this._appId, authToken, this._pool, this._firebaseVersion);\n      this._requests.add(request_1);\n      // Request removes itself from set when complete.\n      request_1.getPromise().then(function () {\n        return _this._requests.delete(request_1);\n      }, function () {\n        return _this._requests.delete(request_1);\n      });\n      return request_1;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  };\n  return StorageService;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  return uploadBytesResumable(ref, data, metadata);\n}\n/**\r\n * A promise that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\nfunction getMetadata$2(ref) {\n  return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A promise that resolves with the new metadata for this object.\r\n */\nfunction updateMetadata$2(ref, metadata) {\n  return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\nfunction list$2(ref, options) {\n  return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\nfunction listAll$1(ref) {\n  return listAll(ref);\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A promise that resolves with the download\r\n *     URL for this object.\r\n */\nfunction getDownloadURL$1(ref) {\n  return getDownloadURL(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A promise that resolves if the deletion succeeds.\r\n */\nfunction deleteObject$2(ref) {\n  return deleteObject$1(ref);\n}\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  return ref(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */\nfunction _getChild$1(ref, childPath) {\n  return _getChild(ref, childPath);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar UploadTaskSnapshotCompat = /** @class */function () {\n  function UploadTaskSnapshotCompat(_delegate, task, ref) {\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"bytesTransferred\", {\n    get: function () {\n      return this._delegate.bytesTransferred;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"metadata\", {\n    get: function () {\n      return this._delegate.metadata;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"state\", {\n    get: function () {\n      return this._delegate.state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"totalBytes\", {\n    get: function () {\n      return this._delegate.totalBytes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return UploadTaskSnapshotCompat;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar UploadTaskCompat = /** @class */function () {\n  function UploadTaskCompat(_delegate, _ref) {\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n  }\n  Object.defineProperty(UploadTaskCompat.prototype, \"snapshot\", {\n    get: function () {\n      return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  UploadTaskCompat.prototype.then = function (onFulfilled, onRejected) {\n    var _this = this;\n    return this._delegate.then(function (snapshot) {\n      if (onFulfilled) {\n        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));\n      }\n    }, onRejected);\n  };\n  UploadTaskCompat.prototype.on = function (type, nextOrObserver, error, completed) {\n    var _this = this;\n    var wrappedNextOrObserver = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = function (taskSnapshot) {\n          return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));\n        };\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next ? function (taskSnapshot) {\n            return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));\n          } : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n  };\n  return UploadTaskCompat;\n}();\nvar ListResultCompat = /** @class */function () {\n  function ListResultCompat(_delegate, _service) {\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n  Object.defineProperty(ListResultCompat.prototype, \"prefixes\", {\n    get: function () {\n      var _this = this;\n      return this._delegate.prefixes.map(function (ref) {\n        return new ReferenceCompat(ref, _this._service);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ListResultCompat.prototype, \"items\", {\n    get: function () {\n      var _this = this;\n      return this._delegate.items.map(function (ref) {\n        return new ReferenceCompat(ref, _this._service);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ListResultCompat.prototype, \"nextPageToken\", {\n    get: function () {\n      return this._delegate.nextPageToken || null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ListResultCompat;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ReferenceCompat = /** @class */function () {\n  function ReferenceCompat(_delegate, storage) {\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n  Object.defineProperty(ReferenceCompat.prototype, \"name\", {\n    get: function () {\n      return this._delegate.name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"bucket\", {\n    get: function () {\n      return this._delegate.bucket;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"fullPath\", {\n    get: function () {\n      return this._delegate.fullPath;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ReferenceCompat.prototype.toString = function () {\n    return this._delegate.toString();\n  };\n  /**\r\n   * @returns A reference to the object obtained by\r\n   * appending childPath, removing any duplicate, beginning, or trailing\r\n   * slashes.\r\n   */\n  ReferenceCompat.prototype.child = function (childPath) {\n    var reference = _getChild$1(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  };\n  Object.defineProperty(ReferenceCompat.prototype, \"root\", {\n    get: function () {\n      return new ReferenceCompat(this._delegate.root, this.storage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"parent\", {\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\n    get: function () {\n      var reference = this._delegate.parent;\n      if (reference == null) {\n        return null;\n      }\n      return new ReferenceCompat(reference, this.storage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Uploads a blob to this object's location.\r\n   * @param data - The blob to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n  ReferenceCompat.prototype.put = function (data, metadata) {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(uploadBytesResumable$1(this._delegate, data, metadata), this);\n  };\n  /**\r\n   * Uploads a string to this object's location.\r\n   * @param value - The string to upload.\r\n   * @param format - The format of the string to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n  ReferenceCompat.prototype.putString = function (value, format, metadata) {\n    if (format === void 0) {\n      format = StringFormat.RAW;\n    }\n    this._throwIfRoot('putString');\n    var data = dataFromString(format, value);\n    var metadataClone = __assign({}, metadata);\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(new UploadTask(this._delegate, new FbsBlob(data.data, true), metadataClone), this);\n  };\n  /**\r\n   * List all items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * This is a helper method for calling list() repeatedly until there are\r\n   * no more results. The default pagination size is 1000.\r\n   *\r\n   * Note: The results may not be consistent if objects are changed while this\r\n   * operation is running.\r\n   *\r\n   * Warning: listAll may potentially consume too many resources if there are\r\n   * too many results.\r\n   *\r\n   * @returns A Promise that resolves with all the items and prefixes under\r\n   *  the current storage reference. `prefixes` contains references to\r\n   *  sub-directories and `items` contains references to objects in this\r\n   *  folder. `nextPageToken` is never returned.\r\n   */\n  ReferenceCompat.prototype.listAll = function () {\n    var _this = this;\n    return listAll$1(this._delegate).then(function (r) {\n      return new ListResultCompat(r, _this.storage);\n    });\n  };\n  /**\r\n   * List items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * List API is only available for Firebase Rules Version 2.\r\n   *\r\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n   *\r\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n   * support objects whose paths end with \"/\" or contain two consecutive\r\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n   * list() may fail if there are too many unsupported objects in the bucket.\r\n   *\r\n   * @param options - See ListOptions for details.\r\n   * @returns A Promise that resolves with the items and prefixes.\r\n   * `prefixes` contains references to sub-folders and `items`\r\n   * contains references to objects in this folder. `nextPageToken`\r\n   * can be used to get the rest of the results.\r\n   */\n  ReferenceCompat.prototype.list = function (options) {\n    var _this = this;\n    return list$2(this._delegate, options || undefined).then(function (r) {\n      return new ListResultCompat(r, _this.storage);\n    });\n  };\n  /**\r\n   * A promise that resolves with the metadata for this object. If this\r\n   * object doesn't exist or metadata cannot be retreived, the promise is\r\n   * rejected.\r\n   */\n  ReferenceCompat.prototype.getMetadata = function () {\n    return getMetadata$2(this._delegate);\n  };\n  /**\r\n   * Updates the metadata for this object.\r\n   * @param metadata - The new metadata for the object.\r\n   * Only values that have been explicitly set will be changed. Explicitly\r\n   * setting a value to null will remove the metadata.\r\n   * @returns A promise that resolves\r\n   * with the new metadata for this object.\r\n   * @see firebaseStorage.Reference.prototype.getMetadata\r\n   */\n  ReferenceCompat.prototype.updateMetadata = function (metadata) {\n    return updateMetadata$2(this._delegate, metadata);\n  };\n  /**\r\n   * @returns A promise that resolves with the download\r\n   * URL for this object.\r\n   */\n  ReferenceCompat.prototype.getDownloadURL = function () {\n    return getDownloadURL$1(this._delegate);\n  };\n  /**\r\n   * Deletes the object at this location.\r\n   * @returns A promise that resolves if the deletion succeeds.\r\n   */\n  ReferenceCompat.prototype.delete = function () {\n    this._throwIfRoot('delete');\n    return deleteObject$2(this._delegate);\n  };\n  ReferenceCompat.prototype._throwIfRoot = function (name) {\n    if (this._delegate._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  };\n  return ReferenceCompat;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\nvar StorageServiceCompat = /** @class */function () {\n  function StorageServiceCompat(app, _delegate) {\n    var _this = this;\n    this.app = app;\n    this._delegate = _delegate;\n    this.INTERNAL = {\n      /**\r\n       * Called when the associated app is deleted.\r\n       */\n      delete: function () {\n        return _this._delegate._delete();\n      }\n    };\n  }\n  Object.defineProperty(StorageServiceCompat.prototype, \"maxOperationRetryTime\", {\n    get: function () {\n      return this._delegate.maxOperationRetryTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StorageServiceCompat.prototype, \"maxUploadRetryTime\", {\n    get: function () {\n      return this._delegate.maxUploadRetryTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns a firebaseStorage.Reference for the given path in the default\r\n   * bucket.\r\n   */\n  StorageServiceCompat.prototype.ref = function (path) {\n    if (isUrl(path)) {\n      throw invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n    }\n    return new ReferenceCompat(ref$1(this._delegate, path), this);\n  };\n  /**\r\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n   * which must be a gs:// or http[s]:// URL.\r\n   */\n  StorageServiceCompat.prototype.refFromURL = function (url) {\n    if (!isUrl(url)) {\n      throw invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n    }\n    try {\n      Location.makeFromUrl(url);\n    } catch (e) {\n      throw invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n    }\n    return new ReferenceCompat(ref$1(this._delegate, url), this);\n  };\n  StorageServiceCompat.prototype.setMaxUploadRetryTime = function (time) {\n    this._delegate.maxUploadRetryTime = time;\n  };\n  StorageServiceCompat.prototype.setMaxOperationRetryTime = function (time) {\n    this._delegate.maxOperationRetryTime = time;\n  };\n  return StorageServiceCompat;\n}();\nvar name = \"@firebase/storage\";\nvar version = \"0.4.5\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Storage.\r\n */\nvar STORAGE_TYPE = 'storage';\nfunction factory(container, _a) {\n  var url = _a.instanceIdentifier;\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  var app = container.getProvider('app').getImmediate();\n  var authProvider = container.getProvider('auth-internal');\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  var storageServiceCompat = new StorageServiceCompat(app, new StorageService(app, authProvider, new XhrIoPool(), url, firebase.SDK_VERSION));\n  return storageServiceCompat;\n}\nfunction registerStorage(instance) {\n  var namespaceExports = {\n    // no-inline\n    TaskState: TaskState,\n    TaskEvent: TaskEvent,\n    StringFormat: StringFormat,\n    Storage: StorageService,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\nregisterStorage(firebase);\nexport { registerStorage };","map":{"version":3,"mappings":"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","names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","__extends","code","message","_super","prependCode","_this","serverResponse","Object","setPrototypeOf","FirebaseStorageError","prototype","customData","FirebaseError","unknown","objectNotFound","path","quotaExceeded","bucket","unauthenticated","unauthorized","retryLimitExceeded","canceled","invalidUrl","url","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","serverFileWrongSize","noDownloadURL","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","data","contentType","dataFromString","stringData","StringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","value","b","i","length","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","decodeURIComponent","e","hasMinus","indexOf","hasUnder","invalidChar","hasPlus","hasSlash","replace","bytes","atob","array","dataURL","matches","match","middle","base64","endsWith","substring","rest","dataUrl","parts","DataURLParts","s","end","longEnough","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","ErrorCode","xhr_","XMLHttpRequest","errorCode_","NO_ERROR","sendPromise_","Promise","addEventListener","ABORT","resolve","NETWORK_ERROR","NetworkXhrIo","method","body","headers","sent_","open","undefined","key","hasOwnProperty","setRequestHeader","toString","send","status","responseText","abort","header","getResponseHeader","listener","upload","removeEventListener","XhrIoPool","path_","Location","encode","encodeURIComponent","bucketString","bucketLocation","makeFromUrl","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","version","firebaseStorageHost","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","group","captures","exec","bucketValue","pathValue","error","promise_","reject","FailRequest","_appDelete","start","f","callback","timeout","waitSeconds","timeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","_i","args","apply","callWithDelay","millis","setTimeout","handler","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","clearTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","makeUrl","urlPart","makeQueryString","params","queryPart","nextPart","successCodes","additionalRetryCodes","errorCallback","progressCallback","pool","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","progressCallback_","timeout_","pool_","resolve_","reject_","start_","NetworkRequest","self","doTheRequest","backoffCallback","RequestEndStatus","xhr","createXhrIo","pendingXhr_","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","then","removeUploadProgressListener","hitServer","getErrorCode","getStatus","isRetryStatusCode_","wasCanceled","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","getResponseText","err","appDelete_","canceled_","backoffId_","appDelete","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","isRequestSpecificRetryCode","addAuthHeader_","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","makeRequest","requestInfo","urlParams","assign","errorHandler","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob","bb","append","sliceBlob","blob","webkitSlice","mozSlice","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","FbsBlob","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength_1","forEach","merged_1","index_1","jsonObjectOrNull","obj","JSON","parse","parent","index","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","join","lastComponent","noXform_","metadata","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","Mapping","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","_a","pathWithoutTrailingSlash","reference","_c","_b","item","fromResponseString","handlerCheck","cndn","metadataHandler","text","listHandler","downloadUrlHandler","sharedErrorHandler","newErr","objectErrorHandler","shared","getMetadata","fullServerUrl","maxOperationRetryTime","RequestInfo","list","delimiter","pageToken","maxResults","isRoot","bucketOnlyServerUrl","getDownloadUrl","updateMetadata","deleteObject","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","uploadData","current","finalized","checkResumeHeader_","allowed","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","ResumableUploadStatus","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","status_","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","nextOrObserver","complete","asFunctions","next","observer","async","argsToForward","ref","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_request","_chunkMultiplier","_codeEquals","_needToFetchStatus","completeTransitions_","_error","_transition","_metadataErrorHandler","_promise","_resolve","_reject","_start","UploadTask","sizeBefore","_transferred","_updateProgress","_uploadUrl","_createResumable","_fetchStatus","_needToFetchMetadata","_fetchMetadata","_continueUpload","_oneShotUpload","storage","_getAuthToken","_resolveToken","_location","createRequest","_makeRequest","getPromise","statusRequest","_makeProgressCallback","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","externalState","bytesTransferred","totalBytes","task","completed","Observer","_addObserver","_removeObserver","onFulfilled","onRejected","_observers","_notifyObserver","splice","_finishPromise","observers","triggered","fbsAsync","bind","snapshot","toCall","_service","Reference","_newRef","uploadBytesResumable","_throwIfRoot","listAll","accumulator","listAllHelper","opt","nextPage","list$1","options","op","requestsList","getMetadata$1","requestsGetMetadata","updateMetadata$1","requestsUpdateMetadata","getDownloadURL","requestsGetDownloadUrl","deleteObject$1","requestsDeleteObject","_getChild","isUrl","test","refFromURL","refFromPath","StorageService","_bucket","includes","serviceOrRef","pathOrUrl","extractBucket","config","makeFromBucketSpec","app","_authProvider","_pool","_url","_firebaseVersion","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","auth","getImmediate","optional","getToken","tokenData","accessToken","_deleted","clear","request_1","_appId","add","delete","uploadBytesResumable$1","uploadBytesResumableInternal","getMetadata$2","getMetadataInternal","updateMetadata$2","updateMetadataInternal","list$2","listInternal","listAll$1","listAllInternal","getDownloadURL$1","getDownloadURLInternal","deleteObject$2","deleteObjectInternal","ref$1","refInternal","_getChild$1","_getChildInternal","_delegate","UploadTaskSnapshotCompat","catch","pause","resume","UploadTaskCompat","wrappedNextOrObserver","taskSnapshot","on","ListResultCompat","ReferenceCompat","root","__assign","_UploadTask","_FbsBlob","r","_delete","StorageServiceCompat","_Location","STORAGE_TYPE","factory","container","getProvider","authProvider","storageServiceCompat","firebase","SDK_VERSION","registerStorage","instance","namespaceExports","Storage","INTERNAL","registerComponent","Component","setServiceProps","setMultipleInstances","registerVersion"],"sources":["../src/implementation/constants.ts","../src/implementation/error.ts","../src/implementation/string.ts","../src/implementation/taskenums.ts","../src/implementation/xhrio.ts","../src/implementation/xhrio_network.ts","../src/implementation/xhriopool.ts","../src/implementation/location.ts","../src/implementation/failrequest.ts","../src/implementation/backoff.ts","../src/implementation/type.ts","../src/implementation/url.ts","../src/implementation/request.ts","../src/implementation/fs.ts","../src/implementation/blob.ts","../src/implementation/json.ts","../src/implementation/path.ts","../src/implementation/metadata.ts","../src/implementation/list.ts","../src/implementation/requestinfo.ts","../src/implementation/requests.ts","../src/implementation/observer.ts","../src/implementation/async.ts","../src/task.ts","../src/reference.ts","../src/service.ts","../exp/api.ts","../compat/tasksnapshot.ts","../compat/task.ts","../compat/list.ts","../compat/reference.ts","../compat/service.ts","../index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","import { FirebaseError } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class FirebaseStorageError extends FirebaseError {\n  /**\n   * Stores custom error data unque to FirebaseStorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, FirebaseStorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Error message including serverResponse if available.\n   */\n  get message(): string {\n    if (this.customData.serverResponse) {\n      return `${this.message}\\n${this.customData.serverResponse}`;\n    } else {\n      return this.message;\n    }\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `FirebaseStorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): FirebaseStorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new FirebaseStorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): FirebaseStorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new FirebaseStorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorized(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function invalidArgument(message: string): FirebaseStorageError {\n  return new FirebaseStorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): FirebaseStorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n */\nexport function invalidRootOperation(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(\n  format: string,\n  message: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = string;\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n};\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = atob(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n */\nexport type TaskState = string;\n\n/**\n * Represents the current state of a running upload.\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * XHR headers\n */\nexport interface Headers {\n  [name: string]: string | number;\n}\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n */\nexport interface XhrIo {\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<XhrIo>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponseText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { internalError } from './error';\n\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nexport class NetworkXhrIo implements XhrIo {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<XhrIo>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<XhrIo> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Replacement for goog.net.XhrIoPool that works with fbs.XhrIo.\n */\nimport { XhrIo } from './xhrio';\nimport { NetworkXhrIo } from './xhrio_network';\n\n/**\n * Factory-like class for creating XhrIo instances.\n */\nexport class XhrIoPool {\n  createXhrIo(): XhrIo {\n    return new NetworkXhrIo();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      '(?:storage.googleapis.com|storage.cloud.google.com)';\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: FirebaseStorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { DEFAULT_HOST } from './constants';\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(urlPart: string): string {\n  return `https://${DEFAULT_HOST}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { start, stop, id as backoffId } from './backoff';\nimport {\n  FirebaseStorageError,\n  unknown,\n  appDeleted,\n  canceled,\n  retryLimitExceeded\n} from './error';\nimport { RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { XhrIoPool } from './xhriopool';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\nclass NetworkRequest<T> implements Request<T> {\n  private url_: string;\n  private method_: string;\n  private headers_: Headers;\n  private body_: string | Blob | Uint8Array | null;\n  private successCodes_: number[];\n  private additionalRetryCodes_: number[];\n  private pendingXhr_: XhrIo | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: T | PromiseLike<T>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private callback_: (p1: XhrIo, p2: string) => T;\n  private errorCallback_:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null;\n  private progressCallback_: ((p1: number, p2: number) => void) | null;\n  private timeout_: number;\n  private pool_: XhrIoPool;\n  promise_: Promise<T>;\n\n  constructor(\n    url: string,\n    method: string,\n    headers: Headers,\n    body: string | Blob | Uint8Array | null,\n    successCodes: number[],\n    additionalRetryCodes: number[],\n    callback: (p1: XhrIo, p2: string) => T,\n    errorCallback:\n      | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n      | null,\n    timeout: number,\n    progressCallback: ((p1: number, p2: number) => void) | null,\n    pool: XhrIoPool\n  ) {\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: T | PromiseLike<T>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const self = this;\n\n    function doTheRequest(\n      backoffCallback: (p1: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ): void {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const xhr = self.pool_.createXhrIo();\n      self.pendingXhr_ = xhr;\n\n      function progressListener(progressEvent: ProgressEvent): void {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        xhr.addUploadProgressListener(progressListener);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      xhr\n        .send(self.url_, self.method_, self.body_, self.headers_)\n        .then((xhr: XhrIo) => {\n          if (self.progressCallback_ !== null) {\n            xhr.removeUploadProgressListener(progressListener);\n          }\n          self.pendingXhr_ = null;\n          xhr = xhr as XhrIo;\n          const hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = xhr.getStatus();\n          if (!hitServer || self.isRetryStatusCode_(status)) {\n            const wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = self.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, xhr));\n        });\n    }\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    function backoffDone(\n      requestWentThrough: boolean,\n      status: RequestEndStatus\n    ): void {\n      const resolve = self.resolve_;\n      const reject = self.reject_;\n      const xhr = status.xhr as XhrIo;\n      if (status.wasSuccessCode) {\n        try {\n          const result = self.callback_(xhr, xhr.getResponseText());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (xhr !== null) {\n          const err = unknown();\n          err.serverResponse = xhr.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(xhr, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingXhr_ !== null) {\n      this.pendingXhr_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public xhr: XhrIo | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function makeRequest<T>(\n  requestInfo: RequestInfo<T>,\n  appId: string | null,\n  authToken: string | null,\n  pool: XhrIoPool,\n  firebaseVersion?: string\n): Request<T> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  return new NetworkRequest<T>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    pool\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, FirebaseStorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { StorageService } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: StorageService): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: StorageService,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: StorageService,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { StorageService } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: StorageService,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: StorageService,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = (obj as unknown) as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Headers, XhrIo } from './xhrio';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n\n  errorHandler:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: (p1: XhrIo, p2: string) => T,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  FirebaseStorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { XhrIo } from './xhrio';\nimport { StorageService } from '../service';\n\n/**\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: StorageService,\n  mappings: Mappings\n): (p1: XhrIo, p2: string) => Metadata {\n  function handler(xhr: XhrIo, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: StorageService,\n  bucket: string\n): (p1: XhrIo, p2: string) => ListResult {\n  function handler(xhr: XhrIo, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: StorageService,\n  mappings: Mappings\n): (p1: XhrIo, p2: string) => string | null {\n  function handler(xhr: XhrIo, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata as Metadata, text);\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      newErr = unauthenticated();\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: StorageService,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: StorageService,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: StorageService,\n  location: Location\n): RequestInfo<void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: XhrIo, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(xhr: XhrIo, allowed?: string[]): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: XhrIo): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: StorageService,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: XhrIo): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: StorageService,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': status_.current\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr: XhrIo, text: string): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { FirebaseStorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `FirebaseStorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `FirebaseStorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  FirebaseStorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  CompleteFn,\n  ErrorFn,\n  Observer,\n  StorageObserver,\n  Subscribe,\n  Unsubscribe\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot } from './tasksnapshot';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserver<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: FirebaseStorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: FirebaseStorageError) => void;\n  private _metadataErrorHandler: (p1: FirebaseStorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: FirebaseStorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(callback: (p1: string | null) => void): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._ref.storage._getAuthToken().then(authToken => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `FirebaseStorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | ((a: UploadTaskSnapshot) => unknown),\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: FirebaseStorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(\n    onRejected: (p1: FirebaseStorageError) => T | Promise<T>\n  ): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: FirebaseStorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as FirebaseStorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, parent, lastComponent } from './implementation/path';\nimport {\n  list as requestsList,\n  getMetadata as requestsGetMetadata,\n  updateMetadata as requestsUpdateMetadata,\n  getDownloadUrl as requestsGetDownloadUrl,\n  deleteObject as requestsDeleteObject,\n  multipartUpload\n} from './implementation/requests';\nimport { ListOptions } from '../exp/public-types';\nimport { StringFormat, dataFromString } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { StorageService } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { UploadResult } from './tasksnapshot';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(private _service: StorageService, location: string | Location) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(service: StorageService, location: Location): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): StorageService {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  return ref.storage\n    ._getAuthToken()\n    .then(authToken => {\n      const requestInfo = multipartUpload(\n        ref.storage,\n        ref._location,\n        getMappings(),\n        new FbsBlob(data, true),\n        metadata\n      );\n      const multipartRequest = ref.storage._makeRequest(requestInfo, authToken);\n      return multipartRequest.getPromise();\n    })\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport async function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const authToken = await ref.storage._getAuthToken();\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * A promise that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport async function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A promise that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport async function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A promise that resolves with the download\n *     URL for this object.\n */\nexport async function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    ._makeRequest(requestInfo, authToken)\n    .getPromise()\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A promise that resolves if the deletion succeeds.\n */\nexport async function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { XhrIoPool } from './implementation/xhriopool';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  _FirebaseService\n  // eslint-disable-next-line import/no-extraneous-dependencies\n} from '@firebase/app-exp';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from '../src/implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: StorageService, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: StorageService | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof StorageService) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      if (path.includes('..')) {\n        throw invalidArgument('`path` param cannot contain \"..\"');\n      }\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: StorageService, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: StorageService | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: StorageService | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof StorageService) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(config?: FirebaseOptions): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString);\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @public\n * @param opt_url - gs:// url to a custom Storage Bucket\n */\nexport class StorageService implements _FirebaseService {\n  readonly _bucket: Location | null = null;\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    readonly _pool: XhrIoPool,\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url);\n    } else {\n      this._bucket = extractBucket(this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    this._deleted = true;\n    this._requests.forEach(request => request.cancel());\n    this._requests.clear();\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<T>(\n    requestInfo: RequestInfo<T>,\n    authToken: string | null\n  ): Request<T> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        this._pool,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _getProvider,\n  FirebaseApp\n  // eslint-disable-next-line import/no-extraneous-dependencies\n} from '@firebase/app-exp';\n\nimport {\n  ref as refInternal,\n  StorageService as StorageServiceInternal\n} from '../src/service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  StorageService,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from '../src/metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal\n} from '../src/reference';\nimport { STORAGE_TYPE } from './constants';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from '../src/implementation/location';\nexport { UploadTask as _UploadTask } from '../src/task';\nexport type { Reference as _Reference } from '../src/reference';\nexport { FbsBlob as _FbsBlob } from '../src/implementation/blob';\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: string,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A promise that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A promise that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A promise that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A promise that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a StorageReference for the given url.\n * @param storage - `StorageService` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: StorageService, url?: string): StorageReference;\n/**\n * Returns a StorageReference for the given path in the\n * default bucket.\n * @param storageOrRef - `StorageService` or `StorageReference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: StorageService | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: StorageService | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  return refInternal(\n    serviceOrRef as StorageServiceInternal | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\nexport { StringFormat } from '../src/implementation/string';\n\n/**\n * Gets a Firebase StorageService instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get Storage instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A Firebase StorageService instance.\n */\nexport function getStorage(\n  app: FirebaseApp,\n  bucketUrl?: string\n): StorageService {\n  // Dependencies\n  const storageProvider: Provider<'storage-exp'> = _getProvider(\n    app,\n    STORAGE_TYPE\n  );\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '../exp/api';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\n\nexport class UploadTaskSnapshotCompat implements types.UploadTaskSnapshot {\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  FirebaseStorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '../exp/api';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\n\nexport class UploadTaskCompat implements types.UploadTask {\n  constructor(\n    private readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: FirebaseStorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: (error: FirebaseStorageError) => void | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '../exp/api';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\n\nexport class ListResultCompat implements types.ListResult {\n  constructor(\n    private readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob\n} from '../exp/api'; // import from the exp public API\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Metadata } from '../src/metadata';\nimport { dataFromString } from '../src/implementation/string';\nimport { invalidRootOperation } from '../src/implementation/error';\n\nexport class ReferenceCompat implements types.Reference {\n  constructor(\n    private readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as Metadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = dataFromString(format, value);\n    const metadataClone = { ...metadata } as Metadata;\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A promise that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A promise that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as Metadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A promise that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport { StorageService, ref, _Location } from '../exp/api'; // import from the exp public API\nimport { ReferenceCompat } from './reference';\nimport { isUrl } from '../src/service';\nimport { invalidArgument } from '../src/implementation/error';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat implements types.FirebaseStorage {\n  constructor(public app: FirebaseApp, readonly _delegate: StorageService) {}\n\n  INTERNAL = {\n    /**\n     * Called when the associated app is deleted.\n     */\n    delete: () => {\n      return this._delegate._delete();\n    }\n  };\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url);\n    } catch (e) {\n      throw invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { StringFormat } from './src/implementation/string';\nimport { TaskEvent, TaskState } from './src/implementation/taskenums';\n\nimport { XhrIoPool } from './src/implementation/xhriopool';\nimport { ReferenceCompat } from './compat/reference';\nimport { StorageServiceCompat } from './compat/service';\nimport { StorageService } from './src/service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from './package.json';\n\nimport './register-module';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    new StorageService(\n      app,\n      authProvider,\n      new XhrIoPool(),\n      url,\n      firebase.SDK_VERSION\n    )\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageService,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as _FirebaseNamespace);\n"]},"metadata":{},"sourceType":"module"}