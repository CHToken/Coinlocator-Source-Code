{"ast":null,"code":"import{ethers}from\"ethers\";import{getContractWithSigner}from\"./contract\";export const buyNitrogem=async(walletAddress,nitrogemAmount,bnbAmount)=>{const contract=getContractWithSigner();try{let txhash=await contract.buyNitrogem(nitrogemAmount,{value:ethers.utils.parseUnits(bnbAmount,18),from:walletAddress});let res=await txhash.wait();if(res.transactionHash){return{success:true,status:\"Successfully bought.\"};}else{return{success:false,status:\"Buy Transaction failed.\"};}}catch(e){return{success:false,status:e.message};}};export const buyRubyTier=async(walletAddress,bnbAmount)=>{const contract=getContractWithSigner();try{let txhash=await contract.buyRubyTier({value:ethers.utils.parseUnits(bnbAmount,18),from:walletAddress});let res=await txhash.wait();if(res.transactionHash){return{success:true,status:\"Successfully bought.\"};}else{return{success:false,status:\"Buy Transaction failed.\"};}}catch(e){return{success:false,status:e.message};}};export const buyDiamondTier=async(walletAddress,bnbAmount)=>{const contract=getContractWithSigner();try{let txhash=await contract.buyDiamondTier({value:ethers.utils.parseUnits(bnbAmount,18),from:walletAddress});let res=await txhash.wait();if(res.transactionHash){return{success:true,status:\"Successfully bought.\"};}else{return{success:false,status:\"Buy Transaction failed.\"};}}catch(e){console.log(e,\"buy diamond tier\");return{success:false,status:e.message};}};export const voteWithNitrogem=async(walletAddress,nitroAmount)=>{const contract=getContractWithSigner();try{let txhash=await contract.voteWithNitrogem(nitroAmount,{from:walletAddress});let res=await txhash.wait();if(res.transactionHash){return{success:true,status:\"Successfully added.\"};}else{return{success:false,status:\"Add Transaction failed.\"};}}catch(e){return{success:false,status:e.message};}};","map":{"version":3,"names":["ethers","getContractWithSigner","buyNitrogem","walletAddress","nitrogemAmount","bnbAmount","contract","txhash","value","utils","parseUnits","from","res","wait","transactionHash","success","status","e","message","buyRubyTier","buyDiamondTier","console","log","voteWithNitrogem","nitroAmount"],"sources":["C:/Users/USER/Desktop/coinlocator/frontend/src/helpers/interact.js"],"sourcesContent":["import { ethers } from \"ethers\"\r\nimport { getContractWithSigner } from \"./contract\"\r\n\r\nexport const buyNitrogem = async (\r\n  walletAddress,\r\n  nitrogemAmount,\r\n  bnbAmount\r\n) => {\r\n\r\n  const contract = getContractWithSigner();\r\n  \r\n  try {\r\n    let txhash = await contract.buyNitrogem(nitrogemAmount, {\r\n      value: ethers.utils.parseUnits(bnbAmount, 18),\r\n      from: walletAddress,\r\n    })\r\n    let res = await txhash.wait();\r\n\r\n    if(res.transactionHash) {\r\n      return{\r\n        success: true,\r\n        status: \"Successfully bought.\"\r\n      }\r\n    }\r\n    else{\r\n      return{\r\n        success: false,\r\n        status: \"Buy Transaction failed.\",\r\n      }\r\n    } \r\n  } catch(e) {\r\n    return {\r\n      success: false,\r\n      status: e.message,\r\n    }\r\n  }\r\n}\r\n\r\nexport const buyRubyTier = async (\r\n  walletAddress,\r\n  bnbAmount\r\n) => {\r\n\r\n  const contract = getContractWithSigner();\r\n  \r\n  try {\r\n    let txhash = await contract.buyRubyTier({\r\n      value: ethers.utils.parseUnits(bnbAmount, 18),\r\n      from: walletAddress,\r\n    })\r\n    let res = await txhash.wait();\r\n\r\n    if(res.transactionHash) {\r\n      return{\r\n        success: true,\r\n        status: \"Successfully bought.\"\r\n      }\r\n    }\r\n    else{\r\n      return{\r\n        success: false,\r\n        status: \"Buy Transaction failed.\",\r\n      }\r\n    } \r\n  } catch(e) {\r\n    return {\r\n      success: false,\r\n      status: e.message,\r\n    }\r\n  }\r\n}\r\n\r\nexport const buyDiamondTier = async (\r\n  walletAddress,\r\n  bnbAmount\r\n) => {\r\n\r\n  const contract = getContractWithSigner();\r\n  \r\n  try {\r\n    let txhash = await contract.buyDiamondTier({\r\n      value: ethers.utils.parseUnits(bnbAmount, 18),\r\n      from: walletAddress,\r\n    })\r\n    let res = await txhash.wait();\r\n\r\n    if(res.transactionHash) {\r\n      return{\r\n        success: true,\r\n        status: \"Successfully bought.\"\r\n      }\r\n    }\r\n    else{\r\n      return{\r\n        success: false,\r\n        status: \"Buy Transaction failed.\",\r\n      }\r\n    } \r\n  } catch(e) {\r\n    console.log(e, \"buy diamond tier\");\r\n    return {\r\n      success: false,\r\n      status: e.message,\r\n    }\r\n  }\r\n}\r\n\r\nexport const voteWithNitrogem = async (\r\n  walletAddress,\r\n  nitroAmount\r\n) => {\r\n\r\n  const contract = getContractWithSigner();\r\n  \r\n  try {\r\n    let txhash = await contract.voteWithNitrogem(nitroAmount, {\r\n      from: walletAddress,\r\n    })\r\n    let res = await txhash.wait();\r\n\r\n    if(res.transactionHash) {\r\n      return{\r\n        success: true,\r\n        status: \"Successfully added.\"\r\n      }\r\n    }\r\n    else{\r\n      return{\r\n        success: false,\r\n        status: \"Add Transaction failed.\",\r\n      }\r\n    } \r\n  } catch(e) {\r\n    return {\r\n      success: false,\r\n      status: e.message,\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}