{"ast":null,"code":"import { ethers } from \"ethers\";\nimport contractABI from \"./abis/abi.json\";\nimport { ENVS } from \"./configurations/index\";\n\n// Contract can be used to write Contract\nexport const getContractWithSigner = () => {\n  const infuraProvider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = infuraProvider.getSigner();\n  const contract = new ethers.Contract(ENVS.CONTRACT_ADDRESS, contractABI, signer);\n  return contract;\n};\n\n// Contract can be used to read Contract\nconst getContractWithoutSigner = () => {\n  const infuraProvider = new ethers.providers.Web3Provider(window.ethereum);\n  const contract = new ethers.Contract(ENVS.CONTRACT_ADDRESS, contractABI, infuraProvider);\n  return contract;\n};\nexport const getNitrogemAmount = async walletAddress => {\n  const contract = getContractWithoutSigner();\n  try {\n    let nitroAmount = await contract.getNitrogemAmount(walletAddress);\n    return nitroAmount;\n  } catch (err) {\n    return 0;\n  }\n};","map":{"version":3,"names":["ethers","contractABI","ENVS","getContractWithSigner","infuraProvider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","CONTRACT_ADDRESS","getContractWithoutSigner","getNitrogemAmount","walletAddress","nitroAmount","err"],"sources":["C:/Users/USER/Desktop/coinlocator/frontend/src/helpers/contract.js"],"sourcesContent":["import { ethers } from \"ethers\"\r\nimport contractABI from \"./abis/abi.json\"\r\nimport { ENVS } from \"./configurations/index\"\r\n\r\n// Contract can be used to write Contract\r\nexport const getContractWithSigner = () => {\r\n  const infuraProvider = new ethers.providers.Web3Provider(window.ethereum)\r\n  const signer = infuraProvider.getSigner()\r\n\r\n  const contract = new ethers.Contract(\r\n    ENVS.CONTRACT_ADDRESS,\r\n    contractABI,\r\n    signer\r\n  )\r\n\r\n  return contract\r\n}\r\n\r\n// Contract can be used to read Contract\r\nconst getContractWithoutSigner = () => {\r\n  const infuraProvider = new ethers.providers.Web3Provider(window.ethereum)\r\n  const contract = new ethers.Contract(\r\n    ENVS.CONTRACT_ADDRESS,\r\n    contractABI,\r\n    infuraProvider\r\n  )\r\n\r\n  return contract\r\n}\r\n\r\nexport const getNitrogemAmount = async (walletAddress) => {\r\n  const contract = getContractWithoutSigner()\r\n\r\n  try {\r\n    let nitroAmount = await contract.getNitrogemAmount(walletAddress)\r\n\r\n    return nitroAmount;\r\n  } catch (err) {\r\n    return 0\r\n  }\r\n}"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,iBAAiB;AACzC,SAASC,IAAI,QAAQ,wBAAwB;;AAE7C;AACA,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EACzC,MAAMC,cAAc,GAAG,IAAIJ,MAAM,CAACK,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;EACzE,MAAMC,MAAM,GAAGL,cAAc,CAACM,SAAS,CAAC,CAAC;EAEzC,MAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,QAAQ,CAClCV,IAAI,CAACW,gBAAgB,EACrBZ,WAAW,EACXQ,MACF,CAAC;EAED,OAAOE,QAAQ;AACjB,CAAC;;AAED;AACA,MAAMG,wBAAwB,GAAGA,CAAA,KAAM;EACrC,MAAMV,cAAc,GAAG,IAAIJ,MAAM,CAACK,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;EACzE,MAAMG,QAAQ,GAAG,IAAIX,MAAM,CAACY,QAAQ,CAClCV,IAAI,CAACW,gBAAgB,EACrBZ,WAAW,EACXG,cACF,CAAC;EAED,OAAOO,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMI,iBAAiB,GAAG,MAAOC,aAAa,IAAK;EACxD,MAAML,QAAQ,GAAGG,wBAAwB,CAAC,CAAC;EAE3C,IAAI;IACF,IAAIG,WAAW,GAAG,MAAMN,QAAQ,CAACI,iBAAiB,CAACC,aAAa,CAAC;IAEjE,OAAOC,WAAW;EACpB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,OAAO,CAAC;EACV;AACF,CAAC"},"metadata":{},"sourceType":"module"}