{"ast":null,"code":"import detectEthereumProvider from\"@metamask/detect-provider\";import{ENVS}from\"./configurations/index\";export const connectWallet=async()=>{const provider=await detectEthereumProvider();if(provider){try{const walletChainId=await provider.request({method:\"eth_chainId\"});if(parseInt(walletChainId)===parseInt(ENVS.CHAIN_ID)){const addressArray=await provider.request({method:\"eth_requestAccounts\"});if(addressArray.length){return{address:addressArray[0],status:\"Connected\"};}else{return{address:\"\",status:\"No wallet connected\"};}}else{provider.request({method:\"wallet_switchEthereumChain\",params:[{chainId:ENVS.CHAIN_ID}]});return{address:\"\",status:\"Was on the other chain\"};}}catch(err){return{address:\"\",status:`ðŸ˜¥ ${err.message}`};}}else{console.log(`ðŸ¦Š You must install Metamask, a virtual Ethereum wallet, in your\n            browser.(https://metamask.io/download.html)`);return{address:\"\",status:\"Can't find web3 provider\"};}};export const getCurrentWalletConnected=async()=>{const provider=await detectEthereumProvider();if(provider){try{const addressArray=await provider.request({method:\"eth_accounts\"});const walletChainId=await provider.request({method:\"eth_chainId\"});if(addressArray.length&&walletChainId===ENVS.CHAIN_ID){return{address:addressArray[0],status:\"Get your SadPug pack, 0.013ETH\"};}else{return{address:\"\",status:\"Connect Metamask\"};}}catch(err){return{address:\"\",status:`ðŸ˜¥ ${err.message}`};}}else{console.log(`ðŸ¦Š You must install Metamask, a virtual Ethereum wallet, in your\n            browser.(https://metamask.io/download.html)`);return{address:\"\",status:\"Can't find web3 provider\"};}};","map":{"version":3,"names":["detectEthereumProvider","ENVS","connectWallet","provider","walletChainId","request","method","parseInt","CHAIN_ID","addressArray","length","address","status","params","chainId","err","message","console","log","getCurrentWalletConnected"],"sources":["C:/Users/USER/Desktop/coinlocator/frontend/src/helpers/wallet.js"],"sourcesContent":["import detectEthereumProvider from \"@metamask/detect-provider\"\r\nimport { ENVS } from \"./configurations/index\"\r\n\r\nexport const connectWallet = async() => {\r\n    const provider = await detectEthereumProvider()\r\n\r\n    if (provider) {\r\n        try {\r\n            const walletChainId = await provider.request({\r\n                method: \"eth_chainId\",\r\n            })\r\n\r\n            if (parseInt(walletChainId) === parseInt(ENVS.CHAIN_ID)) {\r\n                const addressArray = await provider.request({\r\n                    method: \"eth_requestAccounts\",\r\n                })\r\n\r\n                if (addressArray.length) {\r\n                    return {\r\n                        address: addressArray[0],\r\n                        status: \"Connected\",\r\n                    }\r\n                } else {\r\n                    return {\r\n                        address: \"\",\r\n                        status: \"No wallet connected\",\r\n                    }\r\n                }\r\n            } else {\r\n                provider.request({\r\n                    method: \"wallet_switchEthereumChain\",\r\n                    params: [{ chainId: ENVS.CHAIN_ID }],\r\n                })\r\n\r\n                return {\r\n                    address: \"\",\r\n                    status: \"Was on the other chain\",\r\n                }\r\n            }\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: `ðŸ˜¥ ${err.message}`,\r\n            }\r\n        }\r\n    } else {\r\n        console.log(`ðŸ¦Š You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.(https://metamask.io/download.html)`)\r\n        return {\r\n            address: \"\",\r\n            status: \"Can't find web3 provider\",\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCurrentWalletConnected = async() => {\r\n    const provider = await detectEthereumProvider()\r\n\r\n    if (provider) {\r\n        try {\r\n            const addressArray = await provider.request({\r\n                method: \"eth_accounts\",\r\n            })\r\n            const walletChainId = await provider.request({\r\n                method: \"eth_chainId\",\r\n            })\r\n            if (addressArray.length && walletChainId === ENVS.CHAIN_ID) {\r\n                return {\r\n                    address: addressArray[0],\r\n                    status: \"Get your SadPug pack, 0.013ETH\",\r\n                }\r\n            } else {\r\n                return {\r\n                    address: \"\",\r\n                    status: \"Connect Metamask\",\r\n                }\r\n            }\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: `ðŸ˜¥ ${err.message}`,\r\n            }\r\n        }\r\n    } else {\r\n        console.log(`ðŸ¦Š You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.(https://metamask.io/download.html)`)\r\n        return {\r\n            address: \"\",\r\n            status: \"Can't find web3 provider\",\r\n        }\r\n    }\r\n}"],"mappings":"AAAA,MAAO,CAAAA,sBAAsB,KAAM,2BAA2B,CAC9D,OAASC,IAAI,KAAQ,wBAAwB,CAE7C,MAAO,MAAM,CAAAC,aAAa,CAAG,KAAAA,CAAA,GAAW,CACpC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAH,sBAAsB,CAAC,CAAC,CAE/C,GAAIG,QAAQ,CAAE,CACV,GAAI,CACA,KAAM,CAAAC,aAAa,CAAG,KAAM,CAAAD,QAAQ,CAACE,OAAO,CAAC,CACzCC,MAAM,CAAE,aACZ,CAAC,CAAC,CAEF,GAAIC,QAAQ,CAACH,aAAa,CAAC,GAAKG,QAAQ,CAACN,IAAI,CAACO,QAAQ,CAAC,CAAE,CACrD,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAN,QAAQ,CAACE,OAAO,CAAC,CACxCC,MAAM,CAAE,qBACZ,CAAC,CAAC,CAEF,GAAIG,YAAY,CAACC,MAAM,CAAE,CACrB,MAAO,CACHC,OAAO,CAAEF,YAAY,CAAC,CAAC,CAAC,CACxBG,MAAM,CAAE,WACZ,CAAC,CACL,CAAC,IAAM,CACH,MAAO,CACHD,OAAO,CAAE,EAAE,CACXC,MAAM,CAAE,qBACZ,CAAC,CACL,CACJ,CAAC,IAAM,CACHT,QAAQ,CAACE,OAAO,CAAC,CACbC,MAAM,CAAE,4BAA4B,CACpCO,MAAM,CAAE,CAAC,CAAEC,OAAO,CAAEb,IAAI,CAACO,QAAS,CAAC,CACvC,CAAC,CAAC,CAEF,MAAO,CACHG,OAAO,CAAE,EAAE,CACXC,MAAM,CAAE,wBACZ,CAAC,CACL,CACJ,CAAE,MAAOG,GAAG,CAAE,CACV,MAAO,CACHJ,OAAO,CAAE,EAAE,CACXC,MAAM,CAAG,MAAKG,GAAG,CAACC,OAAQ,EAC9B,CAAC,CACL,CACJ,CAAC,IAAM,CACHC,OAAO,CAACC,GAAG,CAAE;AACrB,wDAAwD,CAAC,CACjD,MAAO,CACHP,OAAO,CAAE,EAAE,CACXC,MAAM,CAAE,0BACZ,CAAC,CACL,CACJ,CAAC,CAED,MAAO,MAAM,CAAAO,yBAAyB,CAAG,KAAAA,CAAA,GAAW,CAChD,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAH,sBAAsB,CAAC,CAAC,CAE/C,GAAIG,QAAQ,CAAE,CACV,GAAI,CACA,KAAM,CAAAM,YAAY,CAAG,KAAM,CAAAN,QAAQ,CAACE,OAAO,CAAC,CACxCC,MAAM,CAAE,cACZ,CAAC,CAAC,CACF,KAAM,CAAAF,aAAa,CAAG,KAAM,CAAAD,QAAQ,CAACE,OAAO,CAAC,CACzCC,MAAM,CAAE,aACZ,CAAC,CAAC,CACF,GAAIG,YAAY,CAACC,MAAM,EAAIN,aAAa,GAAKH,IAAI,CAACO,QAAQ,CAAE,CACxD,MAAO,CACHG,OAAO,CAAEF,YAAY,CAAC,CAAC,CAAC,CACxBG,MAAM,CAAE,gCACZ,CAAC,CACL,CAAC,IAAM,CACH,MAAO,CACHD,OAAO,CAAE,EAAE,CACXC,MAAM,CAAE,kBACZ,CAAC,CACL,CACJ,CAAE,MAAOG,GAAG,CAAE,CACV,MAAO,CACHJ,OAAO,CAAE,EAAE,CACXC,MAAM,CAAG,MAAKG,GAAG,CAACC,OAAQ,EAC9B,CAAC,CACL,CACJ,CAAC,IAAM,CACHC,OAAO,CAACC,GAAG,CAAE;AACrB,wDAAwD,CAAC,CACjD,MAAO,CACHP,OAAO,CAAE,EAAE,CACXC,MAAM,CAAE,0BACZ,CAAC,CACL,CACJ,CAAC"},"metadata":{},"sourceType":"module"}