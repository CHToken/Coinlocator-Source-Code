{"ast":null,"code":"import detectEthereumProvider from \"@metamask/detect-provider\";\nimport { ENVS } from \"./configurations/index\";\nexport const connectWallet = async () => {\n  const provider = await detectEthereumProvider();\n  if (provider) {\n    try {\n      const walletChainId = await provider.request({\n        method: \"eth_chainId\"\n      });\n      if (parseInt(walletChainId) === parseInt(ENVS.CHAIN_ID)) {\n        const addressArray = await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        if (addressArray.length) {\n          return {\n            address: addressArray[0],\n            status: \"Connected\"\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"No wallet connected\"\n          };\n        }\n      } else {\n        provider.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{\n            chainId: ENVS.CHAIN_ID\n          }]\n        });\n        return {\n          address: \"\",\n          status: \"Was on the other chain\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: `ðŸ˜¥ ${err.message}`\n      };\n    }\n  } else {\n    console.log(`ðŸ¦Š You must install Metamask, a virtual Ethereum wallet, in your\n            browser.(https://metamask.io/download.html)`);\n    return {\n      address: \"\",\n      status: \"Can't find web3 provider\"\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  const provider = await detectEthereumProvider();\n  if (provider) {\n    try {\n      const addressArray = await provider.request({\n        method: \"eth_accounts\"\n      });\n      const walletChainId = await provider.request({\n        method: \"eth_chainId\"\n      });\n      if (addressArray.length && walletChainId === ENVS.CHAIN_ID) {\n        return {\n          address: addressArray[0],\n          status: \"Get your SadPug pack, 0.013ETH\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"Connect Metamask\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: `ðŸ˜¥ ${err.message}`\n      };\n    }\n  } else {\n    console.log(`ðŸ¦Š You must install Metamask, a virtual Ethereum wallet, in your\n            browser.(https://metamask.io/download.html)`);\n    return {\n      address: \"\",\n      status: \"Can't find web3 provider\"\n    };\n  }\n};","map":{"version":3,"names":["detectEthereumProvider","ENVS","connectWallet","provider","walletChainId","request","method","parseInt","CHAIN_ID","addressArray","length","address","status","params","chainId","err","message","console","log","getCurrentWalletConnected"],"sources":["C:/Users/USER/Desktop/coinlocator/frontend/src/helpers/wallet.js"],"sourcesContent":["import detectEthereumProvider from \"@metamask/detect-provider\"\r\nimport { ENVS } from \"./configurations/index\"\r\n\r\nexport const connectWallet = async() => {\r\n    const provider = await detectEthereumProvider()\r\n\r\n    if (provider) {\r\n        try {\r\n            const walletChainId = await provider.request({\r\n                method: \"eth_chainId\",\r\n            })\r\n\r\n            if (parseInt(walletChainId) === parseInt(ENVS.CHAIN_ID)) {\r\n                const addressArray = await provider.request({\r\n                    method: \"eth_requestAccounts\",\r\n                })\r\n\r\n                if (addressArray.length) {\r\n                    return {\r\n                        address: addressArray[0],\r\n                        status: \"Connected\",\r\n                    }\r\n                } else {\r\n                    return {\r\n                        address: \"\",\r\n                        status: \"No wallet connected\",\r\n                    }\r\n                }\r\n            } else {\r\n                provider.request({\r\n                    method: \"wallet_switchEthereumChain\",\r\n                    params: [{ chainId: ENVS.CHAIN_ID }],\r\n                })\r\n\r\n                return {\r\n                    address: \"\",\r\n                    status: \"Was on the other chain\",\r\n                }\r\n            }\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: `ðŸ˜¥ ${err.message}`,\r\n            }\r\n        }\r\n    } else {\r\n        console.log(`ðŸ¦Š You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.(https://metamask.io/download.html)`)\r\n        return {\r\n            address: \"\",\r\n            status: \"Can't find web3 provider\",\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCurrentWalletConnected = async() => {\r\n    const provider = await detectEthereumProvider()\r\n\r\n    if (provider) {\r\n        try {\r\n            const addressArray = await provider.request({\r\n                method: \"eth_accounts\",\r\n            })\r\n            const walletChainId = await provider.request({\r\n                method: \"eth_chainId\",\r\n            })\r\n            if (addressArray.length && walletChainId === ENVS.CHAIN_ID) {\r\n                return {\r\n                    address: addressArray[0],\r\n                    status: \"Get your SadPug pack, 0.013ETH\",\r\n                }\r\n            } else {\r\n                return {\r\n                    address: \"\",\r\n                    status: \"Connect Metamask\",\r\n                }\r\n            }\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: `ðŸ˜¥ ${err.message}`,\r\n            }\r\n        }\r\n    } else {\r\n        console.log(`ðŸ¦Š You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.(https://metamask.io/download.html)`)\r\n        return {\r\n            address: \"\",\r\n            status: \"Can't find web3 provider\",\r\n        }\r\n    }\r\n}"],"mappings":"AAAA,OAAOA,sBAAsB,MAAM,2BAA2B;AAC9D,SAASC,IAAI,QAAQ,wBAAwB;AAE7C,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAW;EACpC,MAAMC,QAAQ,GAAG,MAAMH,sBAAsB,CAAC,CAAC;EAE/C,IAAIG,QAAQ,EAAE;IACV,IAAI;MACA,MAAMC,aAAa,GAAG,MAAMD,QAAQ,CAACE,OAAO,CAAC;QACzCC,MAAM,EAAE;MACZ,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACH,aAAa,CAAC,KAAKG,QAAQ,CAACN,IAAI,CAACO,QAAQ,CAAC,EAAE;QACrD,MAAMC,YAAY,GAAG,MAAMN,QAAQ,CAACE,OAAO,CAAC;UACxCC,MAAM,EAAE;QACZ,CAAC,CAAC;QAEF,IAAIG,YAAY,CAACC,MAAM,EAAE;UACrB,OAAO;YACHC,OAAO,EAAEF,YAAY,CAAC,CAAC,CAAC;YACxBG,MAAM,EAAE;UACZ,CAAC;QACL,CAAC,MAAM;UACH,OAAO;YACHD,OAAO,EAAE,EAAE;YACXC,MAAM,EAAE;UACZ,CAAC;QACL;MACJ,CAAC,MAAM;QACHT,QAAQ,CAACE,OAAO,CAAC;UACbC,MAAM,EAAE,4BAA4B;UACpCO,MAAM,EAAE,CAAC;YAAEC,OAAO,EAAEb,IAAI,CAACO;UAAS,CAAC;QACvC,CAAC,CAAC;QAEF,OAAO;UACHG,OAAO,EAAE,EAAE;UACXC,MAAM,EAAE;QACZ,CAAC;MACL;IACJ,CAAC,CAAC,OAAOG,GAAG,EAAE;MACV,OAAO;QACHJ,OAAO,EAAE,EAAE;QACXC,MAAM,EAAG,MAAKG,GAAG,CAACC,OAAQ;MAC9B,CAAC;IACL;EACJ,CAAC,MAAM;IACHC,OAAO,CAACC,GAAG,CAAE;AACrB,wDAAwD,CAAC;IACjD,OAAO;MACHP,OAAO,EAAE,EAAE;MACXC,MAAM,EAAE;IACZ,CAAC;EACL;AACJ,CAAC;AAED,OAAO,MAAMO,yBAAyB,GAAG,MAAAA,CAAA,KAAW;EAChD,MAAMhB,QAAQ,GAAG,MAAMH,sBAAsB,CAAC,CAAC;EAE/C,IAAIG,QAAQ,EAAE;IACV,IAAI;MACA,MAAMM,YAAY,GAAG,MAAMN,QAAQ,CAACE,OAAO,CAAC;QACxCC,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,MAAMF,aAAa,GAAG,MAAMD,QAAQ,CAACE,OAAO,CAAC;QACzCC,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,IAAIG,YAAY,CAACC,MAAM,IAAIN,aAAa,KAAKH,IAAI,CAACO,QAAQ,EAAE;QACxD,OAAO;UACHG,OAAO,EAAEF,YAAY,CAAC,CAAC,CAAC;UACxBG,MAAM,EAAE;QACZ,CAAC;MACL,CAAC,MAAM;QACH,OAAO;UACHD,OAAO,EAAE,EAAE;UACXC,MAAM,EAAE;QACZ,CAAC;MACL;IACJ,CAAC,CAAC,OAAOG,GAAG,EAAE;MACV,OAAO;QACHJ,OAAO,EAAE,EAAE;QACXC,MAAM,EAAG,MAAKG,GAAG,CAACC,OAAQ;MAC9B,CAAC;IACL;EACJ,CAAC,MAAM;IACHC,OAAO,CAACC,GAAG,CAAE;AACrB,wDAAwD,CAAC;IACjD,OAAO;MACHP,OAAO,EAAE,EAAE;MACXC,MAAM,EAAE;IACZ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"module"}