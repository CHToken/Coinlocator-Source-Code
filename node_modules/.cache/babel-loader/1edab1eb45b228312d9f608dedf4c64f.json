{"ast":null,"code":"import{ethers}from\"ethers\";import contractABI from\"./abis/abi.json\";import{ENVS}from\"./configurations/index\";// Contract can be used to write Contract\nexport const getContractWithSigner=()=>{const infuraProvider=new ethers.providers.Web3Provider(window.ethereum);const signer=infuraProvider.getSigner();const contract=new ethers.Contract(ENVS.CONTRACT_ADDRESS,contractABI,signer);return contract;};// Contract can be used to read Contract\nconst getContractWithoutSigner=()=>{const infuraProvider=new ethers.providers.Web3Provider(window.ethereum);const contract=new ethers.Contract(ENVS.CONTRACT_ADDRESS,contractABI,infuraProvider);return contract;};export const getNitrogemAmount=async walletAddress=>{const contract=getContractWithoutSigner();try{let nitroAmount=await contract.getNitrogemAmount(walletAddress);return nitroAmount;}catch(err){return 0;}};","map":{"version":3,"names":["ethers","contractABI","ENVS","getContractWithSigner","infuraProvider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","CONTRACT_ADDRESS","getContractWithoutSigner","getNitrogemAmount","walletAddress","nitroAmount","err"],"sources":["C:/Users/USER/Desktop/coinlocator/frontend/src/helpers/contract.js"],"sourcesContent":["import { ethers } from \"ethers\"\r\nimport contractABI from \"./abis/abi.json\"\r\nimport { ENVS } from \"./configurations/index\"\r\n\r\n// Contract can be used to write Contract\r\nexport const getContractWithSigner = () => {\r\n  const infuraProvider = new ethers.providers.Web3Provider(window.ethereum)\r\n  const signer = infuraProvider.getSigner()\r\n\r\n  const contract = new ethers.Contract(\r\n    ENVS.CONTRACT_ADDRESS,\r\n    contractABI,\r\n    signer\r\n  )\r\n\r\n  return contract\r\n}\r\n\r\n// Contract can be used to read Contract\r\nconst getContractWithoutSigner = () => {\r\n  const infuraProvider = new ethers.providers.Web3Provider(window.ethereum)\r\n  const contract = new ethers.Contract(\r\n    ENVS.CONTRACT_ADDRESS,\r\n    contractABI,\r\n    infuraProvider\r\n  )\r\n\r\n  return contract\r\n}\r\n\r\nexport const getNitrogemAmount = async (walletAddress) => {\r\n  const contract = getContractWithoutSigner()\r\n\r\n  try {\r\n    let nitroAmount = await contract.getNitrogemAmount(walletAddress)\r\n\r\n    return nitroAmount;\r\n  } catch (err) {\r\n    return 0\r\n  }\r\n}"],"mappings":"AAAA,OAASA,MAAM,KAAQ,QAAQ,CAC/B,MAAO,CAAAC,WAAW,KAAM,iBAAiB,CACzC,OAASC,IAAI,KAAQ,wBAAwB,CAE7C;AACA,MAAO,MAAM,CAAAC,qBAAqB,CAAGA,CAAA,GAAM,CACzC,KAAM,CAAAC,cAAc,CAAG,GAAI,CAAAJ,MAAM,CAACK,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC,CACzE,KAAM,CAAAC,MAAM,CAAGL,cAAc,CAACM,SAAS,CAAC,CAAC,CAEzC,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAX,MAAM,CAACY,QAAQ,CAClCV,IAAI,CAACW,gBAAgB,CACrBZ,WAAW,CACXQ,MACF,CAAC,CAED,MAAO,CAAAE,QAAQ,CACjB,CAAC,CAED;AACA,KAAM,CAAAG,wBAAwB,CAAGA,CAAA,GAAM,CACrC,KAAM,CAAAV,cAAc,CAAG,GAAI,CAAAJ,MAAM,CAACK,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC,CACzE,KAAM,CAAAG,QAAQ,CAAG,GAAI,CAAAX,MAAM,CAACY,QAAQ,CAClCV,IAAI,CAACW,gBAAgB,CACrBZ,WAAW,CACXG,cACF,CAAC,CAED,MAAO,CAAAO,QAAQ,CACjB,CAAC,CAED,MAAO,MAAM,CAAAI,iBAAiB,CAAG,KAAO,CAAAC,aAAa,EAAK,CACxD,KAAM,CAAAL,QAAQ,CAAGG,wBAAwB,CAAC,CAAC,CAE3C,GAAI,CACF,GAAI,CAAAG,WAAW,CAAG,KAAM,CAAAN,QAAQ,CAACI,iBAAiB,CAACC,aAAa,CAAC,CAEjE,MAAO,CAAAC,WAAW,CACpB,CAAE,MAAOC,GAAG,CAAE,CACZ,MAAO,EAAC,CACV,CACF,CAAC"},"metadata":{},"sourceType":"module"}